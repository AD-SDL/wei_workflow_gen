{
    "version": "0.0.1",
    "session_id": "a5c61838-85f9-4f1f-bc95-2da7362942a4",
    "timestamp": 1718059966.513904,
    "validity": 0,
    "original_user_description": "Run PCR with 3 thermocycling cycles and seal plate for 20 minutes at 175 celsius. \nFor the PCR liquid preparation and transfer, you have access to the following materials: \n\nMaster Mix:\n1.) Biowater (10 mL) \n2.) 5x Reaction Buffer (~1mL) \n3.) DNA Polymerase (~40ul) \n4.) DNTPs (~200 uL) \n5.) GC Enhancer (~1mL)\n6.) Empty tube to store materials 1.) to 5.) \n\nDNA:\n7.) Forward Primers (~20ul per well)\n8.) Reverse primers(~20ul per well)\n9.) Template DNA strands (~20ul per well)\n10.) Final Plate for all materials\n",
    "original_user_values": "1.) Transfer Biowater liquid 3 times with 676 uL each. Drop the tip on the last time. \n2.) Transfer 720 uL of 5x Reaction Buffer with 3 mix cycles and 500 uL mix volume per cycle. Drop the tip after. \n3.) Transfer 12 uL of DNA Polymerase 2 times with 3 mix cycles and 20 uL of mix volume per cycle. Drop the tip on the last time.\n4.) Transfer 108 uL of DNTPs with 3 mix cycles and 600 uL of mix volume per cycle. Drop the tip after.\n5.) Transfer 720 uL of GC Enhancer with 7 mix cycles and 700 uL of mix volume per cycle. Drop the tip after. \n6.) Transfer 15 uL of Master Mix liquid 2 times. Do not drop the tip. \n7.) Transfer 20 uL of forward primer liquid 1 times with 3 mix cycles and 15 uL of mix volume per cycle. Drop the tip. \n8.) Transfer 20 uL of backward primer liquid 1 times with 3 mix cycles and 15 uL of mix volume per cycle. Drop the tip. \n9.) Transfer 20 uL of template liquid 1 times with 3 mix cycles and 15 uL of mix volume per cycle. Drop the tip.\n",
    "framework_agent_ctx": [
        {
            "role": "system",
            "content": "Assume the role of a intelligent and experienced scientist. You will be tasked with orchestrating a step by step experiment plan given a list of instruments and user input. "
        },
        {
            "role": "user",
            "content": "Create a step by step plan of the following experiment Run PCR with 3 thermocycling cycles and seal plate for 20 minutes at 175 celsius. \nFor the PCR liquid preparation and transfer, you have access to the following materials: \n\nMaster Mix:\n1.) Biowater (10 mL) \n2.) 5x Reaction Buffer (~1mL) \n3.) DNA Polymerase (~40ul) \n4.) DNTPs (~200 uL) \n5.) GC Enhancer (~1mL)\n6.) Empty tube to store materials 1.) to 5.) \n\nDNA:\n7.) Forward Primers (~20ul per well)\n8.) Reverse primers(~20ul per well)\n9.) Template DNA strands (~20ul per well)\n10.) Final Plate for all materials\n ##### The following is list of all instruments at your disposal {\"locations\": {\"ot2_pcr_alpha.deck1_cooler\": {\"coordinates\": {\"pf400\": [247.999, -30.702, 275.835, 381.513, 124.83, -585.403], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"ot2_pcr_alpha.deck1_cooler\", \"reserved\": null, \"state\": \"Empty\"}, \"peeler.default\": {\"coordinates\": {\"pf400\": [225.521, -24.846, 244.836, 406.623, 80.967, 398.778], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"peeler.default\", \"reserved\": null, \"state\": \"Empty\"}, \"ot2_cp_gamma.deck2\": {\"coordinates\": {\"pf400\": [156, 66.112, 83.9, 656.404, 119.405, -946.818], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"ot2_cp_gamma.deck2\", \"reserved\": null, \"state\": \"Empty\"}, \"wc.trash\": {\"coordinates\": {\"pf400\": [259.847, -36.81, 69.09, 687.466, 81.002, 995.035], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"wc.trash\", \"reserved\": null, \"state\": \"Empty\"}, \"ot2_growth_beta.deck2\": {\"coordinates\": {\"pf400\": [163.23, -59.032, 270.965, 415.013, 129.982, -951.51], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"ot2_growth_beta.deck2\", \"reserved\": null, \"state\": \"Empty\"}, \"sciclops.exchange\": {\"coordinates\": {\"pf400\": [223.0, -38.068, 335.876, 325.434, 79.923, 995.062], \"sciclops\": [0, 0, 0, 0], \"workcell\": [0.74, -0.2678, 1.0514, 0.7071, 0, 0, 0.7071]}, \"name\": \"sciclops.exchange\", \"reserved\": null, \"state\": \"Empty\"}, \"biometra.default\": {\"coordinates\": {\"pf400\": [247.0, 40.698, 38.294, 728.332, 123.077, 301.082], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"biometra.default\", \"reserved\": null, \"state\": \"Empty\"}, \"camera_module.plate_station\": {\"coordinates\": {\"pf400\": [90.597, 26.416, 66.422, 714.811, 81.916, 995.074], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"camera_module.plate_station\", \"reserved\": null, \"state\": \"Empty\"}, \"sealer.default\": {\"coordinates\": {\"pf400\": [206.087, -2.27, 265.371, 363.978, 76.078, 411.648], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"sealer.default\", \"reserved\": null, \"state\": \"Empty\"}}, \"modules\": {\"hidex\": {\"about\": {\"actions\": [{\"args\": [], \"files\": [], \"name\": \"open\"}, {\"args\": [], \"files\": [], \"name\": \"close\"}, {\"args\": [{\"default\": null, \"description\": \"Name of the assay to run\", \"name\": \"assay_name\", \"required\": true, \"type\": \"str\"}], \"files\": [], \"name\": \"run_assay\"}], \"admin_commands\": [], \"description\": \"Module for automating the hidex platereader.\", \"interface\": \"wei_rest_node\", \"model\": \"Hidex Sense Microplate Reader\", \"name\": \"Hidex\", \"resource_pools\": [], \"version\": \"0.2.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://wendy.cels.anl.gov:2005\"}, \"id\": \"01HVS24RY44AARCESGCD1PGKA4\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"Hidex\", \"name\": \"hidex\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"sciclops\": {\"about\": {\"actions\": [{\"args\": [{\"default\": null, \"description\": \"The workcell location to grab the plate from\", \"name\": \"pos\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Removes the lid from the plate at position `pos` if True. Default is False.\", \"name\": \"lid\", \"required\": false, \"type\": \"bool\"}, {\"default\": null, \"description\": \"Throws the lid in the trash if True. Default is False.\", \"name\": \"trash\", \"required\": false, \"type\": \"bool\"}], \"files\": [], \"name\": \"get_plate\"}, {\"args\": [], \"files\": [], \"name\": \"status\"}, {\"args\": [], \"files\": [], \"name\": \"home\"}], \"admin_commands\": [], \"description\": \"Sciclops is a robotic arm module that grabs a plate from a specific tower location.\", \"interface\": \"wei_rest_node\", \"model\": null, \"name\": \"Sciclops Robotic Arm\", \"resource_pools\": [], \"version\": \"1.0.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:2002\"}, \"id\": \"01HVS24RY4602EBH6TKWBDNNR0\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"sciclops\", \"name\": \"sciclops\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0.5713, 1.0934, 1.0514, 0.9831, 0, 0, 0.1826]}, \"sealer\": {\"about\": {\"actions\": [{\"args\": [{\"default\": null, \"description\": \"The amount of time for sealing a plate.\", \"name\": \"time\", \"required\": true, \"type\": \"int\"}, {\"default\": null, \"description\": \"The temperature to heat the plate to when sealing it.\", \"name\": \"temperature\", \"required\": true, \"type\": \"int\"}], \"files\": [], \"name\": \"seal\"}], \"admin_commands\": [], \"description\": \"Sealer is a robot module that can seal plates.\", \"interface\": \"wei_rest_node\", \"model\": null, \"name\": \"Sealer Robot\", \"resource_pools\": [], \"version\": \"0.2.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:2000\"}, \"id\": \"01HVS24RY45BFT3J36GYB7DQP3\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"A4s_sealer\", \"name\": \"sealer\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"ot2_cp_gamma\": {\"about\": {\"actions\": [{\"args\": [{\"default\": null, \"description\": \"Not currently implemented.\", \"name\": \"resource_path\", \"required\": false, \"type\": \"[str, Path]\"}, {\"default\": false, \"description\": \"Whether or not to use the existing resources file (essentially, whether we've restocked or not).\", \"name\": \"use_existing_resources\", \"required\": false, \"type\": \"bool\"}], \"files\": [{\"description\": \"A protocol file to be run (either python or YAML) on the connected OT2.\", \"name\": \"protocol\", \"required\": true}], \"name\": \"run_protocol\"}], \"admin_commands\": [], \"description\": \"Opentrons OT2 Liquidhandling robot\", \"interface\": \"wei_rest_node\", \"model\": \"Opentrons OT2\", \"name\": \"ot2_gc_gamma\", \"resource_pools\": [], \"version\": \"0.2.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://ot2_gamma_node:2005\"}, \"id\": \"01HVS24RY4P2JZHRW09G2ZRJ9T\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"ot2\", \"name\": \"ot2_cp_gamma\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"peeler\": {\"about\": {\"actions\": [{\"args\": [], \"files\": [], \"name\": \"peel\"}], \"admin_commands\": [], \"description\": \"Brooks Xpeel is a  module that can peel covers off plates.\", \"interface\": \"wei_rest_node\", \"model\": null, \"name\": \"Brooks Xpeel\", \"resource_pools\": [], \"version\": \"0.2.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:2001\"}, \"id\": \"01HVS24RY47R446KQSES2X8BQE\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"brooks_peeler\", \"name\": \"peeler\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"biometra\": {\"about\": {\"actions\": [{\"args\": [{\"default\": null, \"description\": \"Plate Type Definition.\", \"name\": \"plate_type\", \"required\": true, \"type\": \"int\"}, {\"default\": null, \"description\": \"An identifier for the protocol to be run.\", \"name\": \"program\", \"required\": true, \"type\": \"int\"}], \"files\": [], \"name\": \"run_protocol\"}, {\"args\": [{\"default\": null, \"description\": \"Plate Type Definition.\", \"name\": \"plate_type\", \"required\": true, \"type\": \"int\"}], \"files\": [], \"name\": \"open_lid\"}, {\"args\": [{\"default\": null, \"description\": \"Plate Type Definition.\", \"name\": \"plate_type\", \"required\": true, \"type\": \"int\"}], \"files\": [], \"name\": \"close_lid\"}, {\"args\": [{\"default\": null, \"description\": \"Plate Type Definition.\", \"name\": \"plate_type\", \"required\": true, \"type\": \"int\"}], \"files\": [], \"name\": \"get_status\"}], \"admin_commands\": [], \"description\": \"Module for automatting a Biometra thermocycler.\", \"interface\": \"wei_rest_node\", \"model\": \"Analytik Jena Biometra TRobot II\", \"name\": \"Biometra\", \"resource_pools\": [], \"version\": \"0.1.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://wendy.cels.anl.gov:2002\"}, \"id\": \"01HVS24RY4Z3TERT69JG8VR9B3\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"Biometra TRobot II\", \"name\": \"biometra\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": null}, \"ot2_pcr_alpha\": {\"about\": {\"actions\": [{\"args\": [{\"default\": null, \"description\": \"Not currently implemented.\", \"name\": \"resource_path\", \"required\": false, \"type\": \"[str, Path]\"}, {\"default\": false, \"description\": \"Whether or not to use the existing resources file (essentially, whether we've restocked or not).\", \"name\": \"use_existing_resources\", \"required\": false, \"type\": \"bool\"}], \"files\": [{\"description\": \"A protocol file to be run (either python or YAML) on the connected OT2.\", \"name\": \"protocol\", \"required\": true}], \"name\": \"run_protocol\"}], \"admin_commands\": [], \"description\": \"Opentrons OT2 Liquidhandling robot\", \"interface\": \"wei_rest_node\", \"model\": \"Opentrons OT2\", \"name\": \"ot2_pcr_alpha\", \"resource_pools\": [], \"version\": \"0.2.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://ot2_alpha_node:2003\"}, \"id\": \"01HVS24RY4DAHK1MB712FKVVJ0\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"ot2\", \"name\": \"ot2_pcr_alpha\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"barty\": {\"about\": {\"detail\": \"Not Found\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://kirby.cels.anl.gov:8000\", \"rest_node_auth\": \"\"}, \"id\": \"01HVS24RY424RAAP0N8FN4X0C5\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"RPL BARTY\", \"name\": \"barty\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"pf400\": {\"about\": {\"actions\": [{\"args\": [{\"default\": null, \"description\": \"Source location in the workcell for pf400 to grab plate from.\", \"name\": \"source\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Transfer location in the workcell for pf400 to transfer plate to.\", \"name\": \"target\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Plate rotation for source location in the workcell.\", \"name\": \"source_plate_rotation\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Plate rotation for target location in the workcell.\", \"name\": \"target_plate_rotation\", \"required\": true, \"type\": \"str\"}], \"files\": [], \"name\": \"transfer\"}, {\"args\": [{\"default\": null, \"description\": \"Target location in the workcell that the plate is currently at.\", \"name\": \"target\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Lid height of the target plate.\", \"name\": \"lid_height\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Rotation of plate at target location in the workcell.\", \"name\": \"target_plate_rotation\", \"required\": true, \"type\": \"str\"}], \"files\": [], \"name\": \"remove_lid\"}, {\"args\": [{\"default\": null, \"description\": \"Target location in workcell that plate is currently at.\", \"name\": \"target\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Lid height of the target plate.\", \"name\": \"lid_height\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Rotation of plate at target location in the workcell.\", \"name\": \"target_plate_rotation\", \"required\": true, \"type\": \"str\"}], \"files\": [], \"name\": \"replace_lid\"}], \"admin_commands\": [], \"description\": \"pf400 is a robot module that moves plates between two robot locations.\", \"interface\": \"wei_rest_node\", \"model\": \"Precise Automation PF400\", \"name\": \"Pf400 Robotic Arm\", \"resource_pools\": [], \"version\": \"0.2.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://pf400_node:3000\"}, \"id\": \"01HVS24RY4ZWDSCV1BTS751R24\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"pf400\", \"name\": \"pf400\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"camera_module\": {\"about\": {\"actions\": [{\"args\": [{\"default\": \"image.jpg\", \"description\": \"\", \"name\": \"file_name\", \"required\": false, \"type\": \"str\"}], \"files\": [], \"name\": \"take_picture\"}], \"admin_commands\": [], \"description\": \"A module that interfaces with a USB camera\", \"interface\": \"wei_rest_node\", \"model\": null, \"name\": \"Webcam Module\", \"resource_pools\": [], \"version\": \"1.3.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:3001\"}, \"id\": \"01HVS24RY4QMT12XKKV1HE7T04\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"camera (logitech)\", \"name\": \"camera_module\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}}, \"workflows\": {}, \"workcell\": {\"locations\": {\"pf400\": {\"biometra.default\": [247.0, 40.698, 38.294, 728.332, 123.077, 301.082], \"camera_module.plate_station\": [90.597, 26.416, 66.422, 714.811, 81.916, 995.074], \"ot2_cp_gamma.deck2\": [156, 66.112, 83.9, 656.404, 119.405, -946.818], \"ot2_growth_beta.deck2\": [163.23, -59.032, 270.965, 415.013, 129.982, -951.51], \"ot2_pcr_alpha.deck1_cooler\": [247.999, -30.702, 275.835, 381.513, 124.83, -585.403], \"peeler.default\": [225.521, -24.846, 244.836, 406.623, 80.967, 398.778], \"sciclops.exchange\": [223.0, -38.068, 335.876, 325.434, 79.923, 995.062], \"sealer.default\": [206.087, -2.27, 265.371, 363.978, 76.078, 411.648], \"wc.trash\": [259.847, -36.81, 69.09, 687.466, 81.002, 995.035]}, \"sciclops\": {\"sciclops.exchange\": [0, 0, 0, 0]}, \"workcell\": {\"biometra.default\": [0, 0, 0, 0, 0, 0, 0], \"camera_module.plate_station\": [0, 0, 0, 0, 0, 0, 0], \"ot2_cp_gamma.deck2\": [0, 0, 0, 0, 0, 0, 0], \"ot2_growth_beta.deck2\": [0, 0, 0, 0, 0, 0, 0], \"ot2_pcr_alpha.deck1_cooler\": [0, 0, 0, 0, 0, 0, 0], \"peeler.default\": [0, 0, 0, 0, 0, 0, 0], \"sciclops.exchange\": [0.74, -0.2678, 1.0514, 0.7071, 0, 0, 0.7071], \"sealer.default\": [0, 0, 0, 0, 0, 0, 0], \"wc.trash\": [0, 0, 0, 0, 0, 0, 0]}}, \"config\": {\"cold_start_delay\": 2, \"compute_local_ep\": \"299edea0-db9a-4693-84ba-babfa655b1be\", \"data_directory\": \"/home/app/.wei\", \"globus_group\": \"dda56f31-53d1-11ed-bd8b-0db7472df7d6\", \"globus_local_ep\": \"\", \"globus_portal_ep\": \"bb8d048a-2cad-4029-a9c7-671ec5d1f84d\", \"globus_search_index\": \"aefcecc6-e554-4f8c-a25b-147f23091944\", \"log_level\": 20, \"redis_host\": \"rpl_redis\", \"redis_port\": 6379, \"reset_locations\": true, \"sequential_scheduler\": false, \"server_host\": \"rpl_modular_wc_server\", \"server_port\": 8000, \"update_interval\": 5.0, \"use_diaspora\": true, \"verify_locations_before_transfer\": false, \"workcell_origin_coordinates\": [9.4307, -10.4176, 0, 1, 0, 0, 0]}, \"modules\": [{\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:2000\"}, \"id\": \"01HVS24RY45BFT3J36GYB7DQP3\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"A4s_sealer\", \"name\": \"sealer\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:2001\"}, \"id\": \"01HVS24RY47R446KQSES2X8BQE\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"brooks_peeler\", \"name\": \"peeler\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:2002\"}, \"id\": \"01HVS24RY4602EBH6TKWBDNNR0\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"sciclops\", \"name\": \"sciclops\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0.5713, 1.0934, 1.0514, 0.9831, 0, 0, 0.1826]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://ot2_alpha_node:2003\"}, \"id\": \"01HVS24RY4DAHK1MB712FKVVJ0\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"ot2\", \"name\": \"ot2_pcr_alpha\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": false, \"config\": {\"rest_node_address\": \"http://ot2_beta_node:2004\"}, \"id\": \"01HVS24RY4AG3CKK1FXGA9V2Z6\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"ot2\", \"name\": \"ot2_gc_beta\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://ot2_gamma_node:2005\"}, \"id\": \"01HVS24RY4P2JZHRW09G2ZRJ9T\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"ot2\", \"name\": \"ot2_cp_gamma\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://pf400_node:3000\"}, \"id\": \"01HVS24RY4ZWDSCV1BTS751R24\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"pf400\", \"name\": \"pf400\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:3001\"}, \"id\": \"01HVS24RY4QMT12XKKV1HE7T04\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"camera (logitech)\", \"name\": \"camera_module\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://wendy.cels.anl.gov:2005\"}, \"id\": \"01HVS24RY44AARCESGCD1PGKA4\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"Hidex\", \"name\": \"hidex\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://kirby.cels.anl.gov:8000\", \"rest_node_auth\": \"\"}, \"id\": \"01HVS24RY424RAAP0N8FN4X0C5\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"RPL BARTY\", \"name\": \"barty\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": false, \"config\": {\"rest_node_address\": \"http://mirbase1.cels.anl.gov/api/v2.0.0/\", \"rest_node_auth\": \"/home/rpl/Documents/mirauth.txt\"}, \"id\": \"01HVS24RY4SBXNHG0QE6HSVCQE\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"MiR250\", \"name\": \"MiR_base\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": false, \"config\": {\"ros_node_address\": \"/ur5_client/UR5_Client_Node\"}, \"id\": \"01HVS24RY4YC61SSSG5ZP2XPYZ\", \"interface\": \"wei_ros_node\", \"locations\": [], \"model\": \"ur5\", \"name\": \"ur5\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://wendy.cels.anl.gov:2002\"}, \"id\": \"01HVS24RY4Z3TERT69JG8VR9B3\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"Biometra TRobot II\", \"name\": \"biometra\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": null}], \"name\": \"RPL_Modular_workcell\"}}, YOU MUST ONLY USE THESE INSTRUMENTS. Make sure to break down large objectives into a smaller, granular tasks. Your responses should always be clear and concise, your should ONLY respond with this step by step plan."
        },
        {
            "role": "assistant",
            "content": "### Step-by-Step PCR Experiment Plan\n\n#### **Stage 1: PCR Liquid Preparation**\n\n1. **Prepare Master Mix:**\n   - **Transfer liquids to the empty tube using `ot2_pcr_alpha`:**\n     1. Add 8 mL of Biowater to the empty tube.\n     2. Add 1 mL of 5x Reaction Buffer to the tube.\n     3. Add 40 \u00b5L of DNA Polymerase to the tube.\n     4. Add 200 \u00b5L of DNTPs to the tube. \n     5. Add 1 mL of GC Enhancer to the tube.\n   - Ensure the contents of the tube are thoroughly mixed.\n\n#### **Stage 2: Aliquoting PCR Master Mix into the Final Plate**\n\n2. **Transfer Master Mix to Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Distribute 60 \u00b5L of the prepared Master Mix into each well of the final plate.\n\n#### **Stage 3: Adding DNA Components to Final Plate**\n\n3. **Add Forward Primers to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of forward primers into each well of the final plate.\n\n4. **Add Reverse Primers to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of reverse primers into each well of the final plate.\n\n5. **Add Template DNA to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of Template DNA into each well of the final plate.\n\n#### **Stage 4: Running PCR Protocol**\n\n6. **Load Plate into Biometra Thermocycler:**\n   - **Using `sciclops`:**\n     1. Get plate from `ot2_pcr_alpha.deck1_cooler`.\n     2. Transfer plate to `biometra.default`.\n\n7. **Execute PCR with 3 Thermocycling Cycles:**\n   - **Using `biometra`:**\n     1. Close lid on Biometra with plate type.\n     2. Run protocol with the specified cycle instructions:\n        - Denaturation at 95\u00b0C for 30 sec.\n        - Annealing at 55\u00b0C for 30 sec.\n        - Extension at 72\u00b0C for 60 sec.\n     3. Repeat the above steps for 2 additional cycles.\n\n#### **Stage 5: Sealing the Plate**\n\n8. **Seal Plate:**\n   - **Using `sciclops`:**\n     1. Transfer the plate from `biometra.default` to `sealer.default`.\n   - **Using `sealer`:**\n     1. Seal plate at 175\u00b0C for 20 minutes.\n\n#### **Stage 6: Completing the Experiment**\n\n9. **Return Sealed Plate to Start Position:**\n   - **Using `sciclops`:**\n     1. Transfer sealed plate from `sealer.default` to `ot2_pcr_alpha.deck1_cooler`.\n\n### End of Plan"
        },
        {
            "role": "user",
            "content": "add and extra step that checks everything over"
        },
        {
            "role": "assistant",
            "content": "### Step-by-Step PCR Experiment Plan with Verification\n\n#### **Stage 1: PCR Liquid Preparation**\n\n1. **Prepare Master Mix:**\n   - **Transfer liquids to the empty tube using `ot2_pcr_alpha`:**\n     1. Add 8 mL of Biowater to the empty tube.\n     2. Add 1 mL of 5x Reaction Buffer to the tube.\n     3. Add 40 \u00b5L of DNA Polymerase to the tube.\n     4. Add 200 \u00b5L of DNTPs to the tube. \n     5. Add 1 mL of GC Enhancer to the tube.\n   - Ensure the contents of the tube are thoroughly mixed.\n\n#### **Stage 2: Aliquoting PCR Master Mix into the Final Plate**\n\n2. **Transfer Master Mix to Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Distribute 60 \u00b5L of the prepared Master Mix into each well of the final plate.\n\n#### **Stage 3: Adding DNA Components to Final Plate**\n\n3. **Add Forward Primers to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of forward primers into each well of the final plate.\n\n4. **Add Reverse Primers to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of reverse primers into each well of the final plate.\n\n5. **Add Template DNA to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of Template DNA into each well of the final plate.\n\n#### **Stage 4: Running PCR Protocol**\n\n6. **Load Plate into Biometra Thermocycler:**\n   - **Using `sciclops`:**\n     1. Get plate from `ot2_pcr_alpha.deck1_cooler`.\n     2. Transfer plate to `biometra.default`.\n\n7. **Execute PCR with 3 Thermocycling Cycles:**\n   - **Using `biometra`:**\n     1. Close lid on Biometra with plate type.\n     2. Run protocol with the specified cycle instructions:\n        - Denaturation at 95\u00b0C for 30 sec.\n        - Annealing at 55\u00b0C for 30 sec.\n        - Extension at 72\u00b0C for 60 sec.\n     3. Repeat the above steps for 2 additional cycles.\n\n#### **Stage 5: Sealing the Plate**\n\n8. **Seal Plate:**\n   - **Using `sciclops`:**\n     1. Transfer the plate from `biometra.default` to `sealer.default`.\n   - **Using `sealer`:**\n     1. Seal plate at 175\u00b0C for 20 minutes.\n\n#### **Stage 6: Verification Step**\n\n9. **Verify Plate Sealing:**\n   - **Using `camera_module` at `camera_module.plate_station`:**\n     1. Take a picture of the sealed plate and verify proper sealing.\n\n#### **Stage 7: Completing the Experiment**\n\n10. **Return Sealed Plate to Start Position:**\n    - **Using `sciclops`:**\n      1. Transfer sealed plate from `sealer.default` to `ot2_pcr_alpha.deck1_cooler`.\n\n### End of Plan"
        }
    ],
    "workflow_agent_ctx": [
        {
            "role": "system",
            "content": "Assume the role of an intelligent assistant tasked with generating a YAML workflow for an experiment. The generated YAML file must adhere to the structure and specifications defined by these Pydantic classes: \nclass Workflow(BaseModel):\n    \"\"\"Grand container that pulls all info of a workflow together\"\"\"\n\n    name: str\n    \"\"\"Name of the workflow\"\"\"\n    modules: List[SimpleModule]\n    \"\"\"List of modules needed for the workflow\"\"\"\n    flowdef: List[Step]\n    \"\"\"User Submitted Steps of the flow\"\"\"\n    metadata: Metadata = Field(default_factory=Metadata)\n    \"\"\"Information about the flow\"\"\"\n\nclass SimpleModule(BaseModel):\n    \"\"\"Simple module for use in the workflow file (does not need as much info)\"\"\"\n\n    name: str\n    \"\"\"Name, should correspond with a module ros node\"\"\"\n\nclass Step(BaseModel, arbitrary_types_allowed=True):\n    \"\"\"Container for a single step\"\"\"\n\n    name: str\n    \"\"\"Name of step\"\"\"\n    module: str\n    \"\"\"Module used in the step\"\"\"\n    action: str\n    \"\"\"The command type to get executed by the robot\"\"\"\n    args: Dict[str, Any] = {}\n    \"\"\"Arguments for instruction\"\"\"\n    checks: Optional[str] = None\n    \"\"\"For future use\"\"\"\n    locations: Dict[str, Any] = {}\n    \"\"\"locations referenced in the step\"\"\"\n    requirements: Dict[str, Any] = {}\n    \"\"\"Equipment/resources needed in module\"\"\"\n    dependencies: List[str] = []\n    \"\"\"Other steps required to be done before this can start\"\"\"\n    priority: Optional[int] = None\n    \"\"\"For scheduling\"\"\"\n    id: str = Field(default_factory=ulid_factory)\n    \"\"\"ID of step\"\"\"\n    comment: Optional[str] = None\n    \"\"\"Notes about step\"\"\"\n\n    start_time: Optional[datetime] = None\n    \"\"\"Time the step started running\"\"\"\n    end_time: Optional[datetime] = None\n    \"\"\"Time the step finished running\"\"\"\n    duration: Optional[timedelta] = None\n    \"\"\"Duration of the step's run\"\"\"\n    result: Optional[\"StepResponse\"] = None\n    \"\"\"Result of the step after being run\"\"\"\n\n    # Load any yaml arguments\n    @validator(\"args\")\n    def validate_args_dict(cls, v: Any, **kwargs: Any) -> Any:\n        \"\"\"asserts that args dict is assembled correctly\"\"\"\n        assert isinstance(v, dict), \"Args is not a dictionary\"\n        for key, arg_data in v.items():\n            try:\n                arg_path = Path(arg_data)\n                # Strings can be path objects, so check if exists before loading it\n                if not arg_path.exists():\n                    return v\n                else:\n                    print(arg_path)\n                    print(arg_path.suffix)\n                if arg_path.suffix == \".yaml\" or arg_path.suffix == \".yml\":\n                    print(f\"Loading yaml from {arg_path}\")\n                    v[key] = yaml.safe_load(arg_path.open(\"r\"))\n                    print(v[key])\n            except TypeError:  # Is not a file\n                pass\n\n        return v\n\nclass Metadata(BaseModel):\n    \"\"\"Metadata container\"\"\"\n\n    author: Optional[str] = None\n    \"\"\"Who authored this workflow\"\"\"\n    info: Optional[str] = None\n    \"\"\"Long description\"\"\"\n    version: float = 0.1\n    \"\"\"Version of interface used\"\"\"\n. Your output will be evaluated based on its compliance with these classes."
        },
        {
            "role": "user",
            "content": "Create a yaml workflow for the following experiment plan. ### Step-by-Step PCR Experiment Plan with Verification\n\n#### **Stage 1: PCR Liquid Preparation**\n\n1. **Prepare Master Mix:**\n   - **Transfer liquids to the empty tube using `ot2_pcr_alpha`:**\n     1. Add 8 mL of Biowater to the empty tube.\n     2. Add 1 mL of 5x Reaction Buffer to the tube.\n     3. Add 40 \u00b5L of DNA Polymerase to the tube.\n     4. Add 200 \u00b5L of DNTPs to the tube. \n     5. Add 1 mL of GC Enhancer to the tube.\n   - Ensure the contents of the tube are thoroughly mixed.\n\n#### **Stage 2: Aliquoting PCR Master Mix into the Final Plate**\n\n2. **Transfer Master Mix to Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Distribute 60 \u00b5L of the prepared Master Mix into each well of the final plate.\n\n#### **Stage 3: Adding DNA Components to Final Plate**\n\n3. **Add Forward Primers to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of forward primers into each well of the final plate.\n\n4. **Add Reverse Primers to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of reverse primers into each well of the final plate.\n\n5. **Add Template DNA to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of Template DNA into each well of the final plate.\n\n#### **Stage 4: Running PCR Protocol**\n\n6. **Load Plate into Biometra Thermocycler:**\n   - **Using `sciclops`:**\n     1. Get plate from `ot2_pcr_alpha.deck1_cooler`.\n     2. Transfer plate to `biometra.default`.\n\n7. **Execute PCR with 3 Thermocycling Cycles:**\n   - **Using `biometra`:**\n     1. Close lid on Biometra with plate type.\n     2. Run protocol with the specified cycle instructions:\n        - Denaturation at 95\u00b0C for 30 sec.\n        - Annealing at 55\u00b0C for 30 sec.\n        - Extension at 72\u00b0C for 60 sec.\n     3. Repeat the above steps for 2 additional cycles.\n\n#### **Stage 5: Sealing the Plate**\n\n8. **Seal Plate:**\n   - **Using `sciclops`:**\n     1. Transfer the plate from `biometra.default` to `sealer.default`.\n   - **Using `sealer`:**\n     1. Seal plate at 175\u00b0C for 20 minutes.\n\n#### **Stage 6: Verification Step**\n\n9. **Verify Plate Sealing:**\n   - **Using `camera_module` at `camera_module.plate_station`:**\n     1. Take a picture of the sealed plate and verify proper sealing.\n\n#### **Stage 7: Completing the Experiment**\n\n10. **Return Sealed Plate to Start Position:**\n    - **Using `sciclops`:**\n      1. Transfer sealed plate from `sealer.default` to `ot2_pcr_alpha.deck1_cooler`.\n\n### End of Plan ##### The following is list of all instruments at your disposal {\"locations\": {\"ot2_pcr_alpha.deck1_cooler\": {\"coordinates\": {\"pf400\": [247.999, -30.702, 275.835, 381.513, 124.83, -585.403], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"ot2_pcr_alpha.deck1_cooler\", \"reserved\": null, \"state\": \"Empty\"}, \"peeler.default\": {\"coordinates\": {\"pf400\": [225.521, -24.846, 244.836, 406.623, 80.967, 398.778], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"peeler.default\", \"reserved\": null, \"state\": \"Empty\"}, \"ot2_cp_gamma.deck2\": {\"coordinates\": {\"pf400\": [156, 66.112, 83.9, 656.404, 119.405, -946.818], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"ot2_cp_gamma.deck2\", \"reserved\": null, \"state\": \"Empty\"}, \"wc.trash\": {\"coordinates\": {\"pf400\": [259.847, -36.81, 69.09, 687.466, 81.002, 995.035], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"wc.trash\", \"reserved\": null, \"state\": \"Empty\"}, \"ot2_growth_beta.deck2\": {\"coordinates\": {\"pf400\": [163.23, -59.032, 270.965, 415.013, 129.982, -951.51], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"ot2_growth_beta.deck2\", \"reserved\": null, \"state\": \"Empty\"}, \"sciclops.exchange\": {\"coordinates\": {\"pf400\": [223.0, -38.068, 335.876, 325.434, 79.923, 995.062], \"sciclops\": [0, 0, 0, 0], \"workcell\": [0.74, -0.2678, 1.0514, 0.7071, 0, 0, 0.7071]}, \"name\": \"sciclops.exchange\", \"reserved\": null, \"state\": \"Empty\"}, \"biometra.default\": {\"coordinates\": {\"pf400\": [247.0, 40.698, 38.294, 728.332, 123.077, 301.082], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"biometra.default\", \"reserved\": null, \"state\": \"Empty\"}, \"camera_module.plate_station\": {\"coordinates\": {\"pf400\": [90.597, 26.416, 66.422, 714.811, 81.916, 995.074], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"camera_module.plate_station\", \"reserved\": null, \"state\": \"Empty\"}, \"sealer.default\": {\"coordinates\": {\"pf400\": [206.087, -2.27, 265.371, 363.978, 76.078, 411.648], \"workcell\": [0, 0, 0, 0, 0, 0, 0]}, \"name\": \"sealer.default\", \"reserved\": null, \"state\": \"Empty\"}}, \"modules\": {\"hidex\": {\"about\": {\"actions\": [{\"args\": [], \"files\": [], \"name\": \"open\"}, {\"args\": [], \"files\": [], \"name\": \"close\"}, {\"args\": [{\"default\": null, \"description\": \"Name of the assay to run\", \"name\": \"assay_name\", \"required\": true, \"type\": \"str\"}], \"files\": [], \"name\": \"run_assay\"}], \"admin_commands\": [], \"description\": \"Module for automating the hidex platereader.\", \"interface\": \"wei_rest_node\", \"model\": \"Hidex Sense Microplate Reader\", \"name\": \"Hidex\", \"resource_pools\": [], \"version\": \"0.2.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://wendy.cels.anl.gov:2005\"}, \"id\": \"01HVS24RY44AARCESGCD1PGKA4\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"Hidex\", \"name\": \"hidex\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"sciclops\": {\"about\": {\"actions\": [{\"args\": [{\"default\": null, \"description\": \"The workcell location to grab the plate from\", \"name\": \"pos\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Removes the lid from the plate at position `pos` if True. Default is False.\", \"name\": \"lid\", \"required\": false, \"type\": \"bool\"}, {\"default\": null, \"description\": \"Throws the lid in the trash if True. Default is False.\", \"name\": \"trash\", \"required\": false, \"type\": \"bool\"}], \"files\": [], \"name\": \"get_plate\"}, {\"args\": [], \"files\": [], \"name\": \"status\"}, {\"args\": [], \"files\": [], \"name\": \"home\"}], \"admin_commands\": [], \"description\": \"Sciclops is a robotic arm module that grabs a plate from a specific tower location.\", \"interface\": \"wei_rest_node\", \"model\": null, \"name\": \"Sciclops Robotic Arm\", \"resource_pools\": [], \"version\": \"1.0.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:2002\"}, \"id\": \"01HVS24RY4602EBH6TKWBDNNR0\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"sciclops\", \"name\": \"sciclops\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0.5713, 1.0934, 1.0514, 0.9831, 0, 0, 0.1826]}, \"sealer\": {\"about\": {\"actions\": [{\"args\": [{\"default\": null, \"description\": \"The amount of time for sealing a plate.\", \"name\": \"time\", \"required\": true, \"type\": \"int\"}, {\"default\": null, \"description\": \"The temperature to heat the plate to when sealing it.\", \"name\": \"temperature\", \"required\": true, \"type\": \"int\"}], \"files\": [], \"name\": \"seal\"}], \"admin_commands\": [], \"description\": \"Sealer is a robot module that can seal plates.\", \"interface\": \"wei_rest_node\", \"model\": null, \"name\": \"Sealer Robot\", \"resource_pools\": [], \"version\": \"0.2.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:2000\"}, \"id\": \"01HVS24RY45BFT3J36GYB7DQP3\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"A4s_sealer\", \"name\": \"sealer\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"ot2_cp_gamma\": {\"about\": {\"actions\": [{\"args\": [{\"default\": null, \"description\": \"Not currently implemented.\", \"name\": \"resource_path\", \"required\": false, \"type\": \"[str, Path]\"}, {\"default\": false, \"description\": \"Whether or not to use the existing resources file (essentially, whether we've restocked or not).\", \"name\": \"use_existing_resources\", \"required\": false, \"type\": \"bool\"}], \"files\": [{\"description\": \"A protocol file to be run (either python or YAML) on the connected OT2.\", \"name\": \"protocol\", \"required\": true}], \"name\": \"run_protocol\"}], \"admin_commands\": [], \"description\": \"Opentrons OT2 Liquidhandling robot\", \"interface\": \"wei_rest_node\", \"model\": \"Opentrons OT2\", \"name\": \"ot2_gc_gamma\", \"resource_pools\": [], \"version\": \"0.2.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://ot2_gamma_node:2005\"}, \"id\": \"01HVS24RY4P2JZHRW09G2ZRJ9T\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"ot2\", \"name\": \"ot2_cp_gamma\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"peeler\": {\"about\": {\"actions\": [{\"args\": [], \"files\": [], \"name\": \"peel\"}], \"admin_commands\": [], \"description\": \"Brooks Xpeel is a  module that can peel covers off plates.\", \"interface\": \"wei_rest_node\", \"model\": null, \"name\": \"Brooks Xpeel\", \"resource_pools\": [], \"version\": \"0.2.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:2001\"}, \"id\": \"01HVS24RY47R446KQSES2X8BQE\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"brooks_peeler\", \"name\": \"peeler\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"biometra\": {\"about\": {\"actions\": [{\"args\": [{\"default\": null, \"description\": \"Plate Type Definition.\", \"name\": \"plate_type\", \"required\": true, \"type\": \"int\"}, {\"default\": null, \"description\": \"An identifier for the protocol to be run.\", \"name\": \"program\", \"required\": true, \"type\": \"int\"}], \"files\": [], \"name\": \"run_protocol\"}, {\"args\": [{\"default\": null, \"description\": \"Plate Type Definition.\", \"name\": \"plate_type\", \"required\": true, \"type\": \"int\"}], \"files\": [], \"name\": \"open_lid\"}, {\"args\": [{\"default\": null, \"description\": \"Plate Type Definition.\", \"name\": \"plate_type\", \"required\": true, \"type\": \"int\"}], \"files\": [], \"name\": \"close_lid\"}, {\"args\": [{\"default\": null, \"description\": \"Plate Type Definition.\", \"name\": \"plate_type\", \"required\": true, \"type\": \"int\"}], \"files\": [], \"name\": \"get_status\"}], \"admin_commands\": [], \"description\": \"Module for automatting a Biometra thermocycler.\", \"interface\": \"wei_rest_node\", \"model\": \"Analytik Jena Biometra TRobot II\", \"name\": \"Biometra\", \"resource_pools\": [], \"version\": \"0.1.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://wendy.cels.anl.gov:2002\"}, \"id\": \"01HVS24RY4Z3TERT69JG8VR9B3\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"Biometra TRobot II\", \"name\": \"biometra\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": null}, \"ot2_pcr_alpha\": {\"about\": {\"actions\": [{\"args\": [{\"default\": null, \"description\": \"Not currently implemented.\", \"name\": \"resource_path\", \"required\": false, \"type\": \"[str, Path]\"}, {\"default\": false, \"description\": \"Whether or not to use the existing resources file (essentially, whether we've restocked or not).\", \"name\": \"use_existing_resources\", \"required\": false, \"type\": \"bool\"}], \"files\": [{\"description\": \"A protocol file to be run (either python or YAML) on the connected OT2.\", \"name\": \"protocol\", \"required\": true}], \"name\": \"run_protocol\"}], \"admin_commands\": [], \"description\": \"Opentrons OT2 Liquidhandling robot\", \"interface\": \"wei_rest_node\", \"model\": \"Opentrons OT2\", \"name\": \"ot2_pcr_alpha\", \"resource_pools\": [], \"version\": \"0.2.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://ot2_alpha_node:2003\"}, \"id\": \"01HVS24RY4DAHK1MB712FKVVJ0\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"ot2\", \"name\": \"ot2_pcr_alpha\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"barty\": {\"about\": {\"detail\": \"Not Found\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://kirby.cels.anl.gov:8000\", \"rest_node_auth\": \"\"}, \"id\": \"01HVS24RY424RAAP0N8FN4X0C5\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"RPL BARTY\", \"name\": \"barty\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"pf400\": {\"about\": {\"actions\": [{\"args\": [{\"default\": null, \"description\": \"Source location in the workcell for pf400 to grab plate from.\", \"name\": \"source\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Transfer location in the workcell for pf400 to transfer plate to.\", \"name\": \"target\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Plate rotation for source location in the workcell.\", \"name\": \"source_plate_rotation\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Plate rotation for target location in the workcell.\", \"name\": \"target_plate_rotation\", \"required\": true, \"type\": \"str\"}], \"files\": [], \"name\": \"transfer\"}, {\"args\": [{\"default\": null, \"description\": \"Target location in the workcell that the plate is currently at.\", \"name\": \"target\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Lid height of the target plate.\", \"name\": \"lid_height\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Rotation of plate at target location in the workcell.\", \"name\": \"target_plate_rotation\", \"required\": true, \"type\": \"str\"}], \"files\": [], \"name\": \"remove_lid\"}, {\"args\": [{\"default\": null, \"description\": \"Target location in workcell that plate is currently at.\", \"name\": \"target\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Lid height of the target plate.\", \"name\": \"lid_height\", \"required\": true, \"type\": \"str\"}, {\"default\": null, \"description\": \"Rotation of plate at target location in the workcell.\", \"name\": \"target_plate_rotation\", \"required\": true, \"type\": \"str\"}], \"files\": [], \"name\": \"replace_lid\"}], \"admin_commands\": [], \"description\": \"pf400 is a robot module that moves plates between two robot locations.\", \"interface\": \"wei_rest_node\", \"model\": \"Precise Automation PF400\", \"name\": \"Pf400 Robotic Arm\", \"resource_pools\": [], \"version\": \"0.2.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://pf400_node:3000\"}, \"id\": \"01HVS24RY4ZWDSCV1BTS751R24\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"pf400\", \"name\": \"pf400\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, \"camera_module\": {\"about\": {\"actions\": [{\"args\": [{\"default\": \"image.jpg\", \"description\": \"\", \"name\": \"file_name\", \"required\": false, \"type\": \"str\"}], \"files\": [], \"name\": \"take_picture\"}], \"admin_commands\": [], \"description\": \"A module that interfaces with a USB camera\", \"interface\": \"wei_rest_node\", \"model\": null, \"name\": \"Webcam Module\", \"resource_pools\": [], \"version\": \"1.3.0\"}, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:3001\"}, \"id\": \"01HVS24RY4QMT12XKKV1HE7T04\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"camera (logitech)\", \"name\": \"camera_module\", \"reserved\": null, \"state\": \"IDLE\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}}, \"workflows\": {}, \"workcell\": {\"locations\": {\"pf400\": {\"biometra.default\": [247.0, 40.698, 38.294, 728.332, 123.077, 301.082], \"camera_module.plate_station\": [90.597, 26.416, 66.422, 714.811, 81.916, 995.074], \"ot2_cp_gamma.deck2\": [156, 66.112, 83.9, 656.404, 119.405, -946.818], \"ot2_growth_beta.deck2\": [163.23, -59.032, 270.965, 415.013, 129.982, -951.51], \"ot2_pcr_alpha.deck1_cooler\": [247.999, -30.702, 275.835, 381.513, 124.83, -585.403], \"peeler.default\": [225.521, -24.846, 244.836, 406.623, 80.967, 398.778], \"sciclops.exchange\": [223.0, -38.068, 335.876, 325.434, 79.923, 995.062], \"sealer.default\": [206.087, -2.27, 265.371, 363.978, 76.078, 411.648], \"wc.trash\": [259.847, -36.81, 69.09, 687.466, 81.002, 995.035]}, \"sciclops\": {\"sciclops.exchange\": [0, 0, 0, 0]}, \"workcell\": {\"biometra.default\": [0, 0, 0, 0, 0, 0, 0], \"camera_module.plate_station\": [0, 0, 0, 0, 0, 0, 0], \"ot2_cp_gamma.deck2\": [0, 0, 0, 0, 0, 0, 0], \"ot2_growth_beta.deck2\": [0, 0, 0, 0, 0, 0, 0], \"ot2_pcr_alpha.deck1_cooler\": [0, 0, 0, 0, 0, 0, 0], \"peeler.default\": [0, 0, 0, 0, 0, 0, 0], \"sciclops.exchange\": [0.74, -0.2678, 1.0514, 0.7071, 0, 0, 0.7071], \"sealer.default\": [0, 0, 0, 0, 0, 0, 0], \"wc.trash\": [0, 0, 0, 0, 0, 0, 0]}}, \"config\": {\"cold_start_delay\": 2, \"compute_local_ep\": \"299edea0-db9a-4693-84ba-babfa655b1be\", \"data_directory\": \"/home/app/.wei\", \"globus_group\": \"dda56f31-53d1-11ed-bd8b-0db7472df7d6\", \"globus_local_ep\": \"\", \"globus_portal_ep\": \"bb8d048a-2cad-4029-a9c7-671ec5d1f84d\", \"globus_search_index\": \"aefcecc6-e554-4f8c-a25b-147f23091944\", \"log_level\": 20, \"redis_host\": \"rpl_redis\", \"redis_port\": 6379, \"reset_locations\": true, \"sequential_scheduler\": false, \"server_host\": \"rpl_modular_wc_server\", \"server_port\": 8000, \"update_interval\": 5.0, \"use_diaspora\": true, \"verify_locations_before_transfer\": false, \"workcell_origin_coordinates\": [9.4307, -10.4176, 0, 1, 0, 0, 0]}, \"modules\": [{\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:2000\"}, \"id\": \"01HVS24RY45BFT3J36GYB7DQP3\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"A4s_sealer\", \"name\": \"sealer\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:2001\"}, \"id\": \"01HVS24RY47R446KQSES2X8BQE\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"brooks_peeler\", \"name\": \"peeler\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:2002\"}, \"id\": \"01HVS24RY4602EBH6TKWBDNNR0\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"sciclops\", \"name\": \"sciclops\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0.5713, 1.0934, 1.0514, 0.9831, 0, 0, 0.1826]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://ot2_alpha_node:2003\"}, \"id\": \"01HVS24RY4DAHK1MB712FKVVJ0\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"ot2\", \"name\": \"ot2_pcr_alpha\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": false, \"config\": {\"rest_node_address\": \"http://ot2_beta_node:2004\"}, \"id\": \"01HVS24RY4AG3CKK1FXGA9V2Z6\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"ot2\", \"name\": \"ot2_gc_beta\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://ot2_gamma_node:2005\"}, \"id\": \"01HVS24RY4P2JZHRW09G2ZRJ9T\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"ot2\", \"name\": \"ot2_cp_gamma\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://pf400_node:3000\"}, \"id\": \"01HVS24RY4ZWDSCV1BTS751R24\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"pf400\", \"name\": \"pf400\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://parker.cels.anl.gov:3001\"}, \"id\": \"01HVS24RY4QMT12XKKV1HE7T04\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"camera (logitech)\", \"name\": \"camera_module\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://wendy.cels.anl.gov:2005\"}, \"id\": \"01HVS24RY44AARCESGCD1PGKA4\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"Hidex\", \"name\": \"hidex\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://kirby.cels.anl.gov:8000\", \"rest_node_auth\": \"\"}, \"id\": \"01HVS24RY424RAAP0N8FN4X0C5\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"RPL BARTY\", \"name\": \"barty\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": false, \"config\": {\"rest_node_address\": \"http://mirbase1.cels.anl.gov/api/v2.0.0/\", \"rest_node_auth\": \"/home/rpl/Documents/mirauth.txt\"}, \"id\": \"01HVS24RY4SBXNHG0QE6HSVCQE\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"MiR250\", \"name\": \"MiR_base\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": false, \"config\": {\"ros_node_address\": \"/ur5_client/UR5_Client_Node\"}, \"id\": \"01HVS24RY4YC61SSSG5ZP2XPYZ\", \"interface\": \"wei_ros_node\", \"locations\": [], \"model\": \"ur5\", \"name\": \"ur5\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": [0, 0, 0, 1, 0, 0, 0]}, {\"about\": null, \"active\": true, \"config\": {\"rest_node_address\": \"http://wendy.cels.anl.gov:2002\"}, \"id\": \"01HVS24RY4Z3TERT69JG8VR9B3\", \"interface\": \"wei_rest_node\", \"locations\": [], \"model\": \"Biometra TRobot II\", \"name\": \"biometra\", \"reserved\": null, \"state\": \"INIT\", \"tag\": null, \"workcell_coordinates\": null}], \"name\": \"RPL_Modular_workcell\"}}, YOU MUST ONLY USE THESE INSTRUMENTS. Some suggested instruments to use are: 1. ot2_pcr_alpha\n2. sciclops\n3. biometra\n4. sealer \n5. camera_module. The following are examples of workflows created for similar experiments:\n{'ids': [['clean', 'pcr_demo_wf']], 'distances': [[0.878625750541687, 0.8855223655700684]], 'metadatas': [[{'experiment_info': 'Initial PCR workflow for RPL workcell'}, {'experiment_info': 'Initial PCR workflow for RPL workcell'}]], 'embeddings': None, 'documents': [['metadata:\\n  name: PCR - Workflow\\n  author: <INSERT AUTHOR>\\n  info: Initial PCR workflow for RPL workcell\\n  version: 0.1\\nworkcell: /home/rpl/workspace/rpl_workcell/pcr_workcell/pcr_workcell.yaml\\nmodules:\\n- name: ot2_pcr_beta\\n- name: pf400\\n- name: peeler\\n- name: sealer\\n- name: biometra\\n- name: sciclops\\nflowdef:\\n- name: PCR Plate Exchange\\n  module: sciclops\\n  command: get_plate\\n  args:\\n    pos: tower2\\n  checks: null\\n  comment: Stage pcr plates\\n- name: Move from Sciclops to OT2\\n  module: pf400\\n  command: transfer\\n  args:\\n    source: sciclops.positions.exchange\\n    target: ot2_pcr_alpha.positions.deck1_cooler\\n    source_plate_rotation: narrow\\n    target_plate_rotation: wide\\n  checks: null\\n  comment: Place plate in ot2\\n- name: Mix OT2 reactions\\n  module: ot2_pcr_beta\\n  command: run_protocol\\n  args:\\n    config_path: /home/rpl/workspace/rpl_workcell/pcr_workcell/protocol_files/ot2_beta_test_first.yaml\\n  checks: RESOURCE_CHECK\\n  comment: resource check not implemented, but will be\\n- name: Mix OT2 reactions\\n  module: ot2_pcr_beta\\n  command: run_protocol\\n  args:\\n    config_path: /home/rpl/workspace/rpl_workcell/pcr_workcell/protocol_files/ot2_beta_test_second.yaml\\n  checks: RESOURCE_CHECK\\n  comment: resource check not implemented, but will be\\n- name: Move from OT2 to sealer\\n  module: pf400\\n  command: transfer\\n  args:\\n    source: ot2_pcr_alpha.positions.deck1_cooler\\n    target: sealer.positions.default\\n    source_plate_rotation: wide\\n    target_plate_rotation: narrow\\n  checks: null\\n  comment: null\\n- name: Seal PCR plate\\n  module: sealer\\n  command: seal\\n  args:\\n    time: payload:seal.time\\n    temperature: 175\\n  checks: null\\n  comment: null\\n- name: Move from sealer to Thermocycler\\n  module: pf400\\n  command: transfer\\n  args:\\n    source: sealer.positions.default\\n    target: biometra.positions.default\\n    source_plate_rotation: narrow\\n    target_plate_rotation: wide\\n  checks: null\\n  comment: null\\n- name: Move from Thermocycler to peeler\\n  module: pf400\\n  command: transfer\\n  args:\\n    source: biometra.positions.default\\n    target: peeler.positions.default\\n    source_plate_rotation: wide\\n    target_plate_rotation: narrow\\n  checks: null\\n  comment: null\\n- name: Peel\\n  module: peeler\\n  command: peel\\n  args:\\n    test: null\\n  checks: null\\n  comment: null\\n- name: Move to final location\\n  module: pf400\\n  command: transfer\\n  args:\\n    source: peeler.positions.default\\n    target: camera_module.positions.plate_station\\n    source_plate_rotation: narrow\\n    target_plate_rotation: narrow\\n', 'name: PCR - Workflow\\nmetadata:\\n  author: <INSERT AUTHOR>\\n  info: Initial PCR workflow for RPL workcell\\n  version: 0.1\\nmodules:\\n- name: ot2_pcr_alpha\\n- name: pf400\\n- name: peeler\\n- name: sealer\\n- name: biometra\\n- name: sciclops\\n- name: camera_module\\nflowdef:\\n- name: Sciclops gets plate from stacks\\n  module: sciclops\\n  action: get_plate\\n  args:\\n    loc: tower2\\n  comment: Stage PCR plates\\n- name: pf400 moves plate from sciclops to ot2\\n  module: pf400\\n  action: transfer\\n  args:\\n    source: sciclops.exchange\\n    target: ot2_pcr_alpha.deck1_cooler\\n    source_plate_rotation: narrow\\n    target_plate_rotation: wide\\n- name: ot2 runs the \"Mix reactions\" protocol\\n  module: ot2_pcr_alpha\\n  action: run_protocol\\n  args:\\n    config_path: /home/rpl/workspace/rpl_workcell/pcr_workcell/protocol_files/PCR_prep_full_plate_multi_noresource.yaml\\n    use_existing_resources: false\\n- name: pf400 moves plate from ot2 to sealer\\n  module: pf400\\n  action: transfer\\n  args:\\n    source: ot2_pcr_alpha.deck1_cooler\\n    target: sealer.default\\n    source_plate_rotation: wide\\n    target_plate_rotation: narrow\\n- name: Seal plate in sealer\\n  module: sealer\\n  action: seal\\n  args:\\n    time: payload:seal.time\\n    temperature: 175\\n- name: pf400 moves plate from sealer to biometra\\n  module: pf400\\n  action: transfer\\n  args:\\n    source: sealer.default\\n    target: biometra.default\\n    source_plate_rotation: narrow\\n    target_plate_rotation: wide\\n- name: Close lid of biometra\\n  module: biometra\\n  action: close_lid\\n- name: Run biometra program\\n  module: biometra\\n  action: run_program\\n  args:\\n    program_n: 3\\n- name: Open lid of biometra\\n  module: biometra\\n  action: open_lid\\n- name: pf400 moves plate from biometra to peeler\\n  module: pf400\\n  action: transfer\\n  args:\\n    source: biometra.default\\n    target: peeler.default\\n    source_plate_rotation: wide\\n    target_plate_rotation: narrow\\n- name: Peel plate\\n  module: peeler\\n  action: peel\\n- name: pf400 moves plate from peeler to camera\\n  module: pf400\\n  action: transfer\\n  args:\\n    source: peeler.default\\n    target: camera_module.plate_station\\n    source_plate_rotation: narrow\\n    target_plate_rotation: narrow\\n- name: camera takes picture of plate\\n  module: camera_module\\n  action: take_picture\\n  args:\\n    file_name: final_image.jpg\\n- name: pf400 moves plate to final location\\n  module: pf400\\n  action: transfer\\n  args:\\n    source: camera_module.plate_station\\n    target: wc.trash\\n    source_plate_rotation: narrow\\n    target_plate_rotation: narrow\\n']], 'uris': None, 'data': None}\n #### IMPORTANT: You must respond exclusively with ONLY A YAML FILE."
        },
        {
            "role": "assistant",
            "content": "```yaml\nname: PCR Experiment Workflow\nmodules:\n  - name: ot2_pcr_alpha\n  - name: sciclops\n  - name: biometra\n  - name: sealer\n  - name: camera_module\nflowdef:\n  - name: Prepare Master Mix - Add Biowater\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: biowater_dispense\n      destination: empty_tube\n      volume: 8\n      unit: ml\n    id: stage1_step1\n    dependencies: []\n    comment: Add 8 mL Biowater to empty tube\n\n  - name: Prepare Master Mix - Add Reaction Buffer\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: reaction_buffer_dispense\n      destination: empty_tube\n      volume: 1\n      unit: ml\n    id: stage1_step2\n    dependencies: [stage1_step1]\n    comment: Add 1 mL 5x Reaction Buffer to tube\n\n  - name: Prepare Master Mix - Add DNA Polymerase\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: dna_polymerase_dispense\n      destination: empty_tube\n      volume: 40\n      unit: \u00b5l\n    id: stage1_step3\n    dependencies: [stage1_step2]\n    comment: Add 40 \u00b5L DNA Polymerase to tube\n\n  - name: Prepare Master Mix - Add DNTPs\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: dntps_dispense\n      destination: empty_tube\n      volume: 200\n      unit: \u00b5l\n    id: stage1_step4\n    dependencies: [stage1_step3]\n    comment: Add 200 \u00b5L DNTPs to tube\n\n  - name: Prepare Master Mix - Add GC Enhancer\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: gc_enhancer_dispense\n      destination: empty_tube\n      volume: 1\n      unit: ml\n    id: stage1_step5\n    dependencies: [stage1_step4]\n    comment: Add 1 mL GC Enhancer to tube\n\n  - name: Aliquot Master Mix\n    module: ot2_pcr_alpha\n    action: distribute_liquid\n    args:\n      source: master_mix_tube\n      destination: final_plate\n      volume_per_well: 60\n      unit: \u00b5l\n    id: stage2_step1\n    dependencies: [stage1_step5]\n    comment: Distribute 60 \u00b5L of Master Mix to each well of final plate\n\n  - name: Add Forward Primers\n    module: ot2_pcr_alpha\n    action: add_primers\n    args:\n      primer_type: forward\n      destination: final_plate\n      volume_per_well: 20\n      unit: \u00b5l\n    id: stage3_step1\n    dependencies: [stage2_step1]\n    comment: Add 20 \u00b5L of forward primers into each well of final plate\n\n  - name: Add Reverse Primers\n    module: ot2_pcr_alpha\n    action: add_primers\n    args:\n      primer_type: reverse\n      destination: final_plate\n      volume_per_well: 20\n      unit: \u00b5l\n    id: stage3_step2\n    dependencies: [stage3_step1]\n    comment: Add 20 \u00b5L of reverse primers into each well of final plate\n\n  - name: Add DNA Template\n    module: ot2_pcr_alpha\n    action: add_dna\n    args:\n      source: template_dna\n      destination: final_plate\n      volume_per_well: 20\n      unit: \u00b5l\n    id: stage3_step3\n    dependencies: [stage3_step2]\n    comment: Add 20 \u00b5L of template DNA into each well of final plate\n\n  - name: Transfer Plate to Thermocycler\n    module: sciclops\n    action: transfer_plate\n    args:\n      source: ot2_pcr_alpha.deck1_cooler\n      destination: biometra.default\n    id: stage4_step1\n    dependencies: [stage3_step3]\n    comment: Transfer plate from cooler to thermocycler\n\n  - name: Execute PCR Protocol\n    module: biometra\n    action: run_protocol\n    args:\n      program: pcr_protocol_3cycles\n    id: stage4_step2\n    dependencies: [stage4_step1]\n    comment: Run PCR protocol with 3 thermocycling cycles\n\n  - name: Seal Plate\n    module: sealer\n    action: seal\n    args:\n      temperature: 175\n      time: 20\n    id: stage5_step1\n    dependencies: [stage4_step2]\n    comment: Seal plate at 175\u00b0C for 20 minutes\n\n  - name: Verify Plate Sealing\n    module: camera_module\n    action: take_picture\n    args:\n      location: plate_station\n      file_name: sealed_plate_verification.jpg\n    id: stage6_step1\n    dependencies: [stage5_step1]\n    comment: Verify plate sealing with camera picture\n\n  - name: Return Plate to Cooler\n    module: sciclops\n    action: transfer_plate\n    args:\n      source: sealer.default\n      destination: ot2_pcr_alpha.deck1_cooler\n    id: stage7_step1\n    dependencies: [stage6_step1]\n    comment: Return sealed plate to cooler\nmetadata:\n  author: Your Name\n  info: Detailed PCR Experiment Workflow with verification steps\n  version: 0.1\n```"
        }
    ],
    "code_agent_ctx": [
        {
            "role": "system",
            "content": "**Role**: You are a software programmer.\n**Task**: As a programmer, you are required to write a python file given a specific prompt. Use a Chain-of-Thought approach to break\ndown the problem, create pseudocode, and then write the code in Python language. Ensure that your code is\nefficient, readable, and well-commented.\nFor example, here is a file you might create:\n```python\n#!/usr/bin/env python3\n\nfrom pathlib import Path\nfrom wei import Experiment\nfrom time import sleep\n\n\ndef main():\n    # Connect to the experiment\n    exp = Experiment(\"127.0.0.1\", \"8000\", \"<TEST NAME>\")\n    exp.register_exp()\n    \n    # run the workflow\n    wf_path = Path(\n        \"<PATH TO WORKFLOW>\"\n    )\n\n    flow_info = exp.run_job(wf_path.resolve())\n    print(flow_info)\n\n    # wait for the job to finish\n    while True: \n        flow_state = exp.query_job(flow_info[\"job_id\"])\n        print(flow_state)\n        if flow_state[\"status\"] == \"failed\" or flow_state[\"status\"] == \"success\":\n            break\n        sleep(1)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n**Instructions**:\n1. **Algorithm/Method Selection**: Decide on the most efficient way.\n2. **Pseudocode Creation**: Write down the steps you will follow in pseudocode.\n3. **Code Generation**: Translate your pseudocode into executable Python code."
        },
        {
            "role": "user",
            "content": "Create a python file for running this yaml workflow ```yaml\nname: PCR Experiment Workflow\nmodules:\n  - name: ot2_pcr_alpha\n  - name: sciclops\n  - name: biometra\n  - name: sealer\n  - name: camera_module\nflowdef:\n  - name: Prepare Master Mix - Add Biowater\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: biowater_dispense\n      destination: empty_tube\n      volume: 8\n      unit: ml\n    id: stage1_step1\n    dependencies: []\n    comment: Add 8 mL Biowater to empty tube\n\n  - name: Prepare Master Mix - Add Reaction Buffer\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: reaction_buffer_dispense\n      destination: empty_tube\n      volume: 1\n      unit: ml\n    id: stage1_step2\n    dependencies: [stage1_step1]\n    comment: Add 1 mL 5x Reaction Buffer to tube\n\n  - name: Prepare Master Mix - Add DNA Polymerase\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: dna_polymerase_dispense\n      destination: empty_tube\n      volume: 40\n      unit: \u00b5l\n    id: stage1_step3\n    dependencies: [stage1_step2]\n    comment: Add 40 \u00b5L DNA Polymerase to tube\n\n  - name: Prepare Master Mix - Add DNTPs\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: dntps_dispense\n      destination: empty_tube\n      volume: 200\n      unit: \u00b5l\n    id: stage1_step4\n    dependencies: [stage1_step3]\n    comment: Add 200 \u00b5L DNTPs to tube\n\n  - name: Prepare Master Mix - Add GC Enhancer\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: gc_enhancer_dispense\n      destination: empty_tube\n      volume: 1\n      unit: ml\n    id: stage1_step5\n    dependencies: [stage1_step4]\n    comment: Add 1 mL GC Enhancer to tube\n\n  - name: Aliquot Master Mix\n    module: ot2_pcr_alpha\n    action: distribute_liquid\n    args:\n      source: master_mix_tube\n      destination: final_plate\n      volume_per_well: 60\n      unit: \u00b5l\n    id: stage2_step1\n    dependencies: [stage1_step5]\n    comment: Distribute 60 \u00b5L of Master Mix to each well of final plate\n\n  - name: Add Forward Primers\n    module: ot2_pcr_alpha\n    action: add_primers\n    args:\n      primer_type: forward\n      destination: final_plate\n      volume_per_well: 20\n      unit: \u00b5l\n    id: stage3_step1\n    dependencies: [stage2_step1]\n    comment: Add 20 \u00b5L of forward primers into each well of final plate\n\n  - name: Add Reverse Primers\n    module: ot2_pcr_alpha\n    action: add_primers\n    args:\n      primer_type: reverse\n      destination: final_plate\n      volume_per_well: 20\n      unit: \u00b5l\n    id: stage3_step2\n    dependencies: [stage3_step1]\n    comment: Add 20 \u00b5L of reverse primers into each well of final plate\n\n  - name: Add DNA Template\n    module: ot2_pcr_alpha\n    action: add_dna\n    args:\n      source: template_dna\n      destination: final_plate\n      volume_per_well: 20\n      unit: \u00b5l\n    id: stage3_step3\n    dependencies: [stage3_step2]\n    comment: Add 20 \u00b5L of template DNA into each well of final plate\n\n  - name: Transfer Plate to Thermocycler\n    module: sciclops\n    action: transfer_plate\n    args:\n      source: ot2_pcr_alpha.deck1_cooler\n      destination: biometra.default\n    id: stage4_step1\n    dependencies: [stage3_step3]\n    comment: Transfer plate from cooler to thermocycler\n\n  - name: Execute PCR Protocol\n    module: biometra\n    action: run_protocol\n    args:\n      program: pcr_protocol_3cycles\n    id: stage4_step2\n    dependencies: [stage4_step1]\n    comment: Run PCR protocol with 3 thermocycling cycles\n\n  - name: Seal Plate\n    module: sealer\n    action: seal\n    args:\n      temperature: 175\n      time: 20\n    id: stage5_step1\n    dependencies: [stage4_step2]\n    comment: Seal plate at 175\u00b0C for 20 minutes\n\n  - name: Verify Plate Sealing\n    module: camera_module\n    action: take_picture\n    args:\n      location: plate_station\n      file_name: sealed_plate_verification.jpg\n    id: stage6_step1\n    dependencies: [stage5_step1]\n    comment: Verify plate sealing with camera picture\n\n  - name: Return Plate to Cooler\n    module: sciclops\n    action: transfer_plate\n    args:\n      source: sealer.default\n      destination: ot2_pcr_alpha.deck1_cooler\n    id: stage7_step1\n    dependencies: [stage6_step1]\n    comment: Return sealed plate to cooler\nmetadata:\n  author: Your Name\n  info: Detailed PCR Experiment Workflow with verification steps\n  version: 0.1\n```. This is the experiment that this python code should run (using this workflow) ### Step-by-Step PCR Experiment Plan with Verification\n\n#### **Stage 1: PCR Liquid Preparation**\n\n1. **Prepare Master Mix:**\n   - **Transfer liquids to the empty tube using `ot2_pcr_alpha`:**\n     1. Add 8 mL of Biowater to the empty tube.\n     2. Add 1 mL of 5x Reaction Buffer to the tube.\n     3. Add 40 \u00b5L of DNA Polymerase to the tube.\n     4. Add 200 \u00b5L of DNTPs to the tube. \n     5. Add 1 mL of GC Enhancer to the tube.\n   - Ensure the contents of the tube are thoroughly mixed.\n\n#### **Stage 2: Aliquoting PCR Master Mix into the Final Plate**\n\n2. **Transfer Master Mix to Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Distribute 60 \u00b5L of the prepared Master Mix into each well of the final plate.\n\n#### **Stage 3: Adding DNA Components to Final Plate**\n\n3. **Add Forward Primers to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of forward primers into each well of the final plate.\n\n4. **Add Reverse Primers to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of reverse primers into each well of the final plate.\n\n5. **Add Template DNA to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of Template DNA into each well of the final plate.\n\n#### **Stage 4: Running PCR Protocol**\n\n6. **Load Plate into Biometra Thermocycler:**\n   - **Using `sciclops`:**\n     1. Get plate from `ot2_pcr_alpha.deck1_cooler`.\n     2. Transfer plate to `biometra.default`.\n\n7. **Execute PCR with 3 Thermocycling Cycles:**\n   - **Using `biometra`:**\n     1. Close lid on Biometra with plate type.\n     2. Run protocol with the specified cycle instructions:\n        - Denaturation at 95\u00b0C for 30 sec.\n        - Annealing at 55\u00b0C for 30 sec.\n        - Extension at 72\u00b0C for 60 sec.\n     3. Repeat the above steps for 2 additional cycles.\n\n#### **Stage 5: Sealing the Plate**\n\n8. **Seal Plate:**\n   - **Using `sciclops`:**\n     1. Transfer the plate from `biometra.default` to `sealer.default`.\n   - **Using `sealer`:**\n     1. Seal plate at 175\u00b0C for 20 minutes.\n\n#### **Stage 6: Verification Step**\n\n9. **Verify Plate Sealing:**\n   - **Using `camera_module` at `camera_module.plate_station`:**\n     1. Take a picture of the sealed plate and verify proper sealing.\n\n#### **Stage 7: Completing the Experiment**\n\n10. **Return Sealed Plate to Start Position:**\n    - **Using `sciclops`:**\n      1. Transfer sealed plate from `sealer.default` to `ot2_pcr_alpha.deck1_cooler`.\n\n### End of Plan"
        },
        {
            "role": "assistant",
            "content": "To execute the detailed PCR Experiment Workflow as specified, we need to implement a Python script that reads the workflow and orchestrates its actions accordingly.\n\n### Steps to Develop the Python Script\n\n1. **Load Workflow Configuration**: Read the YAML configuration file.\n2. **Register and initialize the experiment**: Connect to the experiment software.\n3. **Execute Workflow Steps**: Iterate through workflow steps in order of dependencies.\n4. **Monitor Workflow Progress**: Continuously check the status of the current action until completion.\n5. **Handle Dependencies**: Ensure that workflow steps only execute when their dependencies are resolved.\n\n### Pseudocode\n\n1. **Import Required Libraries**:\n   - `yaml` to read YAML files.\n   - `time.sleep` to pause execution between workflow steps.\n   - `pathlib.Path` to handle file paths.\n   - `Experiment` class from experiment control module (assuming it is provided).\n   \n2. **Load YAML Configuration**:\n   - Open and read the YAML file.\n\n3. **Initialize Experiment**:\n   - Register the experiment with the provided setup details.\n\n4. **Execute Workflow**:\n   - Loop through each step in the defined order.\n   - For each step, initiate the action and wait for completion.\n   - Output the status of each step to provide real-time feedback.\n\n5. **Main function**:\n   - Combine all the above steps and handle execution flow.\n\n### Python Script\n\n```python\n#!/usr/bin/env python3\n\nimport yaml\nfrom time import sleep\nfrom pathlib import Path\n\n# Assuming a module exists providing Experiment class\nfrom experiment_module import Experiment\n\n\ndef load_workflow(file_path):\n    with open(file_path, 'r') as stream:\n        return yaml.safe_load(stream)\n\n\ndef execute_step(exp, step):\n    print(f\"Executing Step: {step['name']}\")\n    module = step['module']\n    action = step['action']\n    args = step.get('args', {})\n    comment = step.get('comment', \"\")\n\n    print(f\"Step Comment: {comment}\")\n    exp.run_action(module, action, args)\n\n    # Wait while action is in progress\n    while True:\n        status = exp.query_action_status(module, action)\n        print(f\"Status: {status}\")\n        if status in [\"failed\", \"success\"]:\n            break\n        sleep(1)\n\n    if status == \"failed\":\n        raise Exception(f\"Action {action} in module {module} failed.\")\n\n\ndef main():\n    # Load the workflow definition\n    workflow_file = Path(\"pcr_experiment_workflow.yaml\")\n    workflow = load_workflow(workflow_file)\n\n    # Register the experiment\n    exp = Experiment(\"127.0.0.1\", \"8000\", \"PCR Experiment Workflow\")\n    exp.register_exp()\n\n    # Execute each step in the workflow\n    steps = workflow['flowdef']\n    executed_steps = set()\n\n    while steps:\n        for step in steps:\n            if all(dep in executed_steps for dep in step['dependencies']):\n                execute_step(exp, step)\n                executed_steps.add(step['id'])\n                steps.remove(step)\n                break\n\n    print(\"PCR Experiment Workflow Completed Successfully!\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Key Points\n1. **Loading YAML Configuration**: This script reads the YAML configuration file to get the workflow definition.\n2. **Initialize and Register Experiment**: Uses an assumed `Experiment` class to register and interface with the experiment system.\n3. **Executing Workflow Steps**: Iterates through each step, ensuring dependencies are met and initializing actions.\n4. **Monitoring Progress**: Continuously checks the status of each action until it completes.\n\nPlease ensure:\n- The `Experiment` class and methods like `run_action`, `query_action_status` correspond to the actual implementation specifics provided by the software controlling the experiment.\n- The YAML file path and other configurations are correctly defined.\n- Exception handling is in place where actions may fail for robustness."
        },
        {
            "role": "user",
            "content": "regenerate with more comments please"
        },
        {
            "role": "assistant",
            "content": "Certainly. Here is the regenerated Python script with additional comments for clarity:\n\n```python\n#!/usr/bin/env python3\n\nimport yaml\nfrom time import sleep\nfrom pathlib import Path\n\n# Assuming a module exists providing Experiment class\nfrom experiment_module import Experiment\n\n\ndef load_workflow(file_path):\n    \"\"\"\n    Load the workflow definition from a YAML file.\n    \n    Args:\n        file_path (str): Path to the YAML workflow file.\n\n    Returns:\n        dict: Parsed workflow configuration.\n    \"\"\"\n    with open(file_path, 'r') as stream:\n        return yaml.safe_load(stream)\n\n\ndef execute_step(exp, step):\n    \"\"\"\n    Execute a single step in the workflow.\n    \n    Args:\n        exp (Experiment): The Experiment instance to interface with the workflow system.\n        step (dict): The step details extracted from the workflow configuration.\n    \n    Raises:\n        Exception: If the action execution fails.\n    \"\"\"\n    print(f\"Executing Step: {step['name']}\")\n    module = step['module']\n    action = step['action']\n    args = step.get('args', {})\n    comment = step.get('comment', \"\")\n    \n    # Logging the step information\n    print(f\"Step Comment: {comment}\")\n    \n    # Initiate the action within the specified module\n    exp.run_action(module, action, args)\n    \n    # Loop to wait until the action completes\n    while True:\n        status = exp.query_action_status(module, action)\n        print(f\"Status: {status}\")\n        if status in [\"failed\", \"success\"]:\n            break\n        sleep(1)\n    \n    # Raise an exception if the action fails\n    if status == \"failed\":\n        raise Exception(f\"Action {action} in module {module} failed.\")\n\n\ndef main():\n    \"\"\"\n    Main function to load the workflow and execute it step-by-step.\n    \"\"\"\n    # Define the path to the workflow YAML file\n    workflow_file = Path(\"pcr_experiment_workflow.yaml\")\n    \n    # Load the workflow configuration\n    workflow = load_workflow(workflow_file)\n    \n    # Initialize and register the experiment\n    exp = Experiment(\"127.0.0.1\", \"8000\", \"PCR Experiment Workflow\")\n    exp.register_exp()\n    \n    # Retrieve the list of steps from the workflow definition\n    steps = workflow['flowdef']\n    executed_steps = set()  # Set to track executed steps\n\n    # Loop until all steps are executed\n    while steps:\n        for step in steps:\n            # Check if all dependencies of the current step are met\n            if all(dep in executed_steps for dep in step['dependencies']):\n                # Execute the step\n                execute_step(exp, step)\n                # Mark the step as executed\n                executed_steps.add(step['id'])\n                # Remove the executed step from the list\n                steps.remove(step)\n                break  # Exit to re-check the updated steps list\n\n    print(\"PCR Experiment Workflow Completed Successfully!\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Detailed Comments:\n\n1. **Import Required Libraries**:\n    - **yaml**: Used to read the YAML file containing the workflow.\n    - **time.sleep**: Used to pause execution while waiting for actions to complete.\n    - **pathlib.Path**: Used to handle file paths efficiently.\n\n2. **Function: `load_workflow`**:\n    - Opens and reads the YAML file specified by `file_path`.\n    - Parses and returns the file content as a dictionary.\n\n3. **Function: `execute_step`**:\n    - Accepts an instance of `Experiment` and a dictionary representing a workflow step.\n    - Logs the details of the step being executed.\n    - Calls `run_action` method on the `Experiment` instance to initiate the action.\n    - Enters a loop to periodically check the status of the action until it finishes.\n    - Raises an exception if the action fails to ensure the workflow stops on errors.\n\n4. **Function: `main`**:\n    - Defines the path to the workflow YAML file.\n    - Loads the workflow configuration from the YAML file.\n    - Initializes an `Experiment` instance and registers the experiment.\n    - Iterates through the steps in the workflow, checking and executing steps whose dependencies have been met.\n    - Prints a completion message once all workflow steps have been executed successfully.\n\n### Assumptions:\n- The `Experiment` class and its methods are part of a provided module (`experiment_module`) that interfaces with the experiment control system.\n- The methods `run_action` and `query_action_status` are present in the `Experiment` class, and they facilitate executing and checking the status of actions, respectively.\n- The path to the workflow YAML file (`pcr_experiment_workflow.yaml`) is correct and the file contains the expected structure as per the given YAML configuration."
        }
    ],
    "validator_agent_ctx": null,
    "config_agent_ctx": [
        {
            "role": "system",
            "content": "Assume the role of an intelligent assistant tasked with generating a YAML config and instrument/robot that is used in an experiment."
        },
        {
            "role": "user",
            "content": "You are creating a yaml config for the ot2_pcr_alpha instrument which will be used in the following experiment ### Step-by-Step PCR Experiment Plan with Verification\n\n#### **Stage 1: PCR Liquid Preparation**\n\n1. **Prepare Master Mix:**\n   - **Transfer liquids to the empty tube using `ot2_pcr_alpha`:**\n     1. Add 8 mL of Biowater to the empty tube.\n     2. Add 1 mL of 5x Reaction Buffer to the tube.\n     3. Add 40 \u00b5L of DNA Polymerase to the tube.\n     4. Add 200 \u00b5L of DNTPs to the tube. \n     5. Add 1 mL of GC Enhancer to the tube.\n   - Ensure the contents of the tube are thoroughly mixed.\n\n#### **Stage 2: Aliquoting PCR Master Mix into the Final Plate**\n\n2. **Transfer Master Mix to Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Distribute 60 \u00b5L of the prepared Master Mix into each well of the final plate.\n\n#### **Stage 3: Adding DNA Components to Final Plate**\n\n3. **Add Forward Primers to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of forward primers into each well of the final plate.\n\n4. **Add Reverse Primers to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of reverse primers into each well of the final plate.\n\n5. **Add Template DNA to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of Template DNA into each well of the final plate.\n\n#### **Stage 4: Running PCR Protocol**\n\n6. **Load Plate into Biometra Thermocycler:**\n   - **Using `sciclops`:**\n     1. Get plate from `ot2_pcr_alpha.deck1_cooler`.\n     2. Transfer plate to `biometra.default`.\n\n7. **Execute PCR with 3 Thermocycling Cycles:**\n   - **Using `biometra`:**\n     1. Close lid on Biometra with plate type.\n     2. Run protocol with the specified cycle instructions:\n        - Denaturation at 95\u00b0C for 30 sec.\n        - Annealing at 55\u00b0C for 30 sec.\n        - Extension at 72\u00b0C for 60 sec.\n     3. Repeat the above steps for 2 additional cycles.\n\n#### **Stage 5: Sealing the Plate**\n\n8. **Seal Plate:**\n   - **Using `sciclops`:**\n     1. Transfer the plate from `biometra.default` to `sealer.default`.\n   - **Using `sealer`:**\n     1. Seal plate at 175\u00b0C for 20 minutes.\n\n#### **Stage 6: Verification Step**\n\n9. **Verify Plate Sealing:**\n   - **Using `camera_module` at `camera_module.plate_station`:**\n     1. Take a picture of the sealed plate and verify proper sealing.\n\n#### **Stage 7: Completing the Experiment**\n\n10. **Return Sealed Plate to Start Position:**\n    - **Using `sciclops`:**\n      1. Transfer sealed plate from `sealer.default` to `ot2_pcr_alpha.deck1_cooler`.\n\n### End of Plan. Use the following values 1.) Transfer Biowater liquid 3 times with 676 uL each. Drop the tip on the last time. \n2.) Transfer 720 uL of 5x Reaction Buffer with 3 mix cycles and 500 uL mix volume per cycle. Drop the tip after. \n3.) Transfer 12 uL of DNA Polymerase 2 times with 3 mix cycles and 20 uL of mix volume per cycle. Drop the tip on the last time.\n4.) Transfer 108 uL of DNTPs with 3 mix cycles and 600 uL of mix volume per cycle. Drop the tip after.\n5.) Transfer 720 uL of GC Enhancer with 7 mix cycles and 700 uL of mix volume per cycle. Drop the tip after. \n6.) Transfer 15 uL of Master Mix liquid 2 times. Do not drop the tip. \n7.) Transfer 20 uL of forward primer liquid 1 times with 3 mix cycles and 15 uL of mix volume per cycle. Drop the tip. \n8.) Transfer 20 uL of backward primer liquid 1 times with 3 mix cycles and 15 uL of mix volume per cycle. Drop the tip. \n9.) Transfer 20 uL of template liquid 1 times with 3 mix cycles and 15 uL of mix volume per cycle. Drop the tip.\n as context for desired values in the config. Use the following 3 examples to construct your config\n{'ids': [['ot2_pcr_config', 'PCR_prep_first_half', 'PCR_prep_second_half']], 'distances': [[0.7608442306518555, 1.2766194343566895, 1.302493691444397]], 'metadatas': [[{'experiment_info': 'ot2_pcr_config.yaml'}, {'experiment_info': 'PCR_prep_first_half.yaml'}, {'experiment_info': 'PCR_prep_second_half.yaml'}]], 'embeddings': None, 'documents': [[\"equipment:\\n- name: corning_96_wellplate_360ul_flat\\n  location: '1'\\n- name: opentrons_96_tiprack_20ul\\n  location: '8'\\n- name: opentrons_96_tiprack_300ul\\n  location: '9'\\n- name: p300_multi_gen2\\n  mount: right\\ncommands:\\n- name: Make Master mix\\n  source: 1:[A1, A2, A3, A4]\\n  destination: 1:B1\\n  volume:\\n  - 15\\n  - 100\\n  - 250\\n  - 300\\n  mix_cycles: 1\\n  mix_volume: 0\\n- name: Combine forward primers\\n  source: 1:[D1]\\n  destination: 1:[C1]\\n  volume:\\n  - 13\\n  mix_cycles: 1\\n  mix_volume: 0\\n- name: Combine backward primers\\n  source: 1:[E1]\\n  destination: 1:[C1]\\n  volume:\\n  - 13\\n  mix_cycles: 1\\n  mix_volume: 0\\n- name: Combine DNA\\n  source: 1:[F1]\\n  destination: 1:[C1]\\n  volume:\\n  - 13\\n  mix_cycles: 1\\n  mix_volume: 0\\nmetadata:\\n  protocolName: PCR example template\\n  author: Kyle khippe@anl.gov\\n  description: Demonstration of PCR protocol for OT2\\n  apiLevel: '2.12'\\n\", \"resources:\\n- location: /home/rpl/wei_ws/src/ot2_driver/ot2_driver/protopiler/test_configs/PCR_test_full_plate.xlsx\\n  name: primers_and_templates\\nequipment:\\n- name: nest_96_wellplate_2ml_deep\\n  location: '1'\\n  alias: forward\\n  offset:\\n  - 0\\n  - 1.7\\n  - 3.9\\n- name: nest_96_wellplate_2ml_deep\\n  location: '2'\\n  alias: backward\\n  offset:\\n  - 0\\n  - 1\\n  - 1.4\\n- name: nest_96_wellplate_100ul_pcr_full_skirt\\n  location: '3'\\n  alias: dest\\n  module: Temperature Module\\n  offset:\\n  - 1\\n  - 1.6\\n  - 11\\n- name: nest_96_wellplate_2ml_deep\\n  location: '4'\\n  alias: template\\n  offset:\\n  - 0\\n  - 0\\n  - 1\\n- name: p20_single_gen2\\n  mount: left\\n- name: opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap\\n  location: '6'\\n  offset:\\n  - 0\\n  - 0\\n  - 0.5\\n- name: opentrons_10_tuberack_nest_4x50ml_6x15ml_conical\\n  location: '5'\\n- name: opentrons_96_tiprack_20ul\\n  location: '11'\\n  offset:\\n  - 0.2\\n  - 0.4\\n  - 0\\n- name: opentrons_96_tiprack_1000ul\\n  location: '9'\\n  offset:\\n  - 0.5\\n  - 0.9\\n  - -0.3\\n- name: p1000_single_gen2\\n  mount: right\\ncommands:\\n- name: Cool Block\\n  change_temp: 4\\n- name: BioWater\\n  source: 5:A1\\n  aspirate_clearance: 50\\n  destination: 5:C2\\n  dispense_clearance: 2\\n  volume:\\n  - 676\\n  - 676\\n  - 676\\n  mix_cycles: 0\\n  mix_volume: 0\\n  drop_tip:\\n  - false\\n  - false\\n  - true\\n- name: 5x Reaction Buffer\\n  source: 6:A3\\n  aspirate_clearance: 0.1\\n  destination: 5:C2\\n  dispense_clearance: 2\\n  volume: 720\\n  mix_cycles: 3\\n  mix_volume: 500\\n  drop_tip: true\\n- name: DNA Polymerase\\n  source: 6:A1\\n  aspirate_clearance: 0.1\\n  destination: 5:C2\\n  dispense_clearance: 1\\n  volume:\\n  - 12\\n  - 12\\n  mix_cycles: 3\\n  mix_volume: 20\\n  drop_tip:\\n  - false\\n  - true\\n- name: DNTPs\\n  source: 6:A5\\n  aspirate_clearance: 0.1\\n  destination: 5:C2\\n  dispense_clearance: 2\\n  volume: 108\\n  mix_cycles: 3\\n  mix_volume: 600\\n  drop_tip: true\\n- name: GC Enhancer\\n  source: 6:B3\\n  aspirate_clearance: 0.1\\n  destination: 5:C2\\n  dispense_clearance: 2\\n  volume: 720\\n  mix_cycles: 7\\n  mix_volume: 700\\n  drop_tip: true\\n- name: master mix distribute\\n  source: 5:C2\\n  aspirate_clearance: 1\\n  destination: dest:Destination\\n  dispense_clearance: 1\\n  volume: 15\\n  drop_tip: false\\n- name: master mix distribute 2\\n  source: 5:C2\\n  aspirate_clearance: 1\\n  destination: dest:Destination\\n  dispense_clearance: 1\\n  volume: 15\\n  drop_tip: false\\nmetadata:\\n  protocolName: PCR Prep Full Plate\\n  author: Abe astroka@anl.gov\\n  description: mixing primers and templates with wells read in from file\\n  apiLevel: '2.12'\\n\", \"resources:\\n- location: /home/rpl/wei_ws/src/ot2_driver/ot2_driver/protopiler/test_configs/PCR_test_full_plate.xlsx\\n  name: primers_and_templates\\nequipment:\\n- name: nest_96_wellplate_2ml_deep\\n  location: '1'\\n  alias: forward\\n  offset:\\n  - 0\\n  - 1.7\\n  - 3.9\\n- name: nest_96_wellplate_2ml_deep\\n  location: '2'\\n  alias: backward\\n  offset:\\n  - 0\\n  - 1\\n  - 1.4\\n- name: nest_96_wellplate_100ul_pcr_full_skirt\\n  location: '3'\\n  alias: dest\\n  module: Temperature Module\\n  offset:\\n  - 1\\n  - 1.6\\n  - 11\\n- name: nest_96_wellplate_2ml_deep\\n  location: '4'\\n  alias: template\\n  offset:\\n  - 0\\n  - 0\\n  - 1\\n- name: opentrons_96_tiprack_20ul\\n  location: '8'\\n  offset:\\n  - 0.2\\n  - 0.4\\n  - 0\\n- name: opentrons_96_tiprack_20ul\\n  location: '7'\\n  offset:\\n  - 0.2\\n  - 0.4\\n  - 0\\n- name: opentrons_96_tiprack_20ul\\n  location: '10'\\n  offset:\\n  - 0.2\\n  - 0.4\\n  - 0\\n- name: p20_single_gen2\\n  mount: left\\n- name: opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap\\n  location: '6'\\n  offset:\\n  - 0\\n  - 0\\n  - 0.5\\n- name: opentrons_10_tuberack_nest_4x50ml_6x15ml_conical\\n  location: '5'\\n- name: opentrons_96_tiprack_1000ul\\n  location: '9'\\n  offset:\\n  - 0.5\\n  - 0.9\\n  - -0.3\\n- name: p1000_single_gen2\\n  mount: right\\ncommands:\\n- name: Cool Block\\n  change_temp: 4\\n- name: forward primer\\n  source: forward:Forward Primer\\n  aspirate_clearance: 0.1\\n  destination: dest:Destination\\n  dispense_clearance: 2\\n  volume: Primer Volume\\n  mix_cycles: 3\\n  mix_volume: 15\\n  drop_tip: true\\n- name: backward primer\\n  source: backward:Backward Primer\\n  aspirate_clearance: 0.1\\n  destination: dest:Destination\\n  dispense_clearance: 2\\n  volume: Primer Volume\\n  mix_cycles: 3\\n  mix_volume: 15\\n  drop_tip: true\\n- name: template\\n  source: template:DNA\\n  aspirate_clearance: 0.1\\n  destination: dest:Destination\\n  dispense_clearance: 2\\n  volume: Template Volume\\n  mix_cycles: 3\\n  mix_volume: 15\\n  drop_tip: true\\nmetadata:\\n  protocolName: PCR Prep Full Plate\\n  author: Abe astroka@anl.gov\\n  description: mixing primers and templates with wells read in from file\\n  apiLevel: '2.12'\\n\"]], 'uris': None, 'data': None}\n #### IMPORTANT: You must respond exclusively with ONLY A YAML FILE."
        },
        {
            "role": "assistant",
            "content": "```yaml\nequipment:\n  - name: opentrons_96_tiprack_300ul\n    location: '1'\n  - name: opentrons_96_tiprack_20ul\n    location: '2'\n  - name: opentrons_96_tiprack_20ul\n    location: '3'\n  - name: opentrons_96_tiprack_20ul\n    location: '4'\n  - name: opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap\n    location: '5'\n  - name: opentrons_10_tuberack_nest_4x50ml_6x15ml_conical\n    location: '6'\n  - name: corning_96_wellplate_360ul_flat\n    location: '7'\n  - name: p300_multi_gen2\n    mount: right\n  - name: p20_single_gen2\n    mount: left\n  - name: temperature_module\n    location: '10'\n\ncommands:\n  - name: Transfer Biowater\n    source: '6:A1'\n    destination: '7:A1'\n    volume:\n      - 676\n      - 676\n      - 676\n    mix_cycles: 0\n    mix_volume: 0\n    drop_tip:\n      - false\n      - false\n      - true\n\n  - name: Transfer 5x Reaction Buffer\n    source: '6:A2'\n    destination: '7:A1'\n    volume: 720\n    mix_cycles: 3\n    mix_volume: 500\n    drop_tip: true\n\n  - name: Transfer DNA Polymerase\n    source: '6:A3'\n    destination: '7:A1'\n    volume:\n      - 12\n      - 12\n    mix_cycles: 3\n    mix_volume: 20\n    drop_tip:\n      - false\n      - true\n\n  - name: Transfer DNTPs\n    source: '6:A4'\n    destination: '7:A1'\n    volume: 108\n    mix_cycles: 3\n    mix_volume: 600\n    drop_tip: true\n\n  - name: Transfer GC Enhancer\n    source: '6:A5'\n    destination: '7:A1'\n    volume: 720\n    mix_cycles: 7\n    mix_volume: 700\n    drop_tip: true\n\n  - name: Distribute Master Mix\n    source: '7:A1'\n    destination: '10:A1'\n    volume: 60\n    drop_tip: false\n\n  - name: Add Forward Primer\n    source: '5:A1'\n    destination: '10:A1'\n    volume: 20\n    mix_cycles: 3\n    mix_volume: 15\n    drop_tip: true\n\n  - name: Add Reverse Primer\n    source: '5:A2'\n    destination: '10:A1'\n    volume: 20\n    mix_cycles: 3\n    mix_volume: 15\n    drop_tip: true\n\n  - name: Add Template DNA\n    source: '5:A3'\n    destination: '10:A1'\n    volume: 20\n    mix_cycles: 3\n    mix_volume: 15\n    drop_tip: true\n\n  - name: Transfer Plate to Thermocycler\n    get_plate: ot2_pcr_alpha.deck1_cooler\n    put_plate: biometra.default\n\n  - name: Execute PCR\n    lid: close\n    protocol:\n      cycles: 3\n      steps:\n        - temp: 95\u00b0C\n          time: 30\n        - temp: 55\u00b0C\n          time: 30\n        - temp: 72\u00b0C\n          time: 60\n\n  - name: Transfer Plate to Sealer\n    get_plate: biometra.default\n    put_plate: sealer.default\n\n  - name: Seal Plate\n    temp: 175\u00b0C\n    time: 20\n\n  - name: Verify Plate Sealing\n    station: camera_module.plate_station\n    action: take_picture\n\n  - name: Return Sealed Plate to Starting Position\n    get_plate: sealer.default\n    put_plate: ot2_pcr_alpha.deck1_cooler\n\nmetadata:\n  protocolName: PCR Experiment Protocol\n  author: Researcher Name\n  description: Step-by-Step PCR Experiment Plan with Verification\n  apiLevel: '2.12'\n```"
        }
    ],
    "generated_framework": "### Step-by-Step PCR Experiment Plan with Verification\n\n#### **Stage 1: PCR Liquid Preparation**\n\n1. **Prepare Master Mix:**\n   - **Transfer liquids to the empty tube using `ot2_pcr_alpha`:**\n     1. Add 8 mL of Biowater to the empty tube.\n     2. Add 1 mL of 5x Reaction Buffer to the tube.\n     3. Add 40 \u00b5L of DNA Polymerase to the tube.\n     4. Add 200 \u00b5L of DNTPs to the tube. \n     5. Add 1 mL of GC Enhancer to the tube.\n   - Ensure the contents of the tube are thoroughly mixed.\n\n#### **Stage 2: Aliquoting PCR Master Mix into the Final Plate**\n\n2. **Transfer Master Mix to Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Distribute 60 \u00b5L of the prepared Master Mix into each well of the final plate.\n\n#### **Stage 3: Adding DNA Components to Final Plate**\n\n3. **Add Forward Primers to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of forward primers into each well of the final plate.\n\n4. **Add Reverse Primers to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of reverse primers into each well of the final plate.\n\n5. **Add Template DNA to the Final Plate:**\n   - **Using `ot2_pcr_alpha`:**\n     1. Add 20 \u00b5L of Template DNA into each well of the final plate.\n\n#### **Stage 4: Running PCR Protocol**\n\n6. **Load Plate into Biometra Thermocycler:**\n   - **Using `sciclops`:**\n     1. Get plate from `ot2_pcr_alpha.deck1_cooler`.\n     2. Transfer plate to `biometra.default`.\n\n7. **Execute PCR with 3 Thermocycling Cycles:**\n   - **Using `biometra`:**\n     1. Close lid on Biometra with plate type.\n     2. Run protocol with the specified cycle instructions:\n        - Denaturation at 95\u00b0C for 30 sec.\n        - Annealing at 55\u00b0C for 30 sec.\n        - Extension at 72\u00b0C for 60 sec.\n     3. Repeat the above steps for 2 additional cycles.\n\n#### **Stage 5: Sealing the Plate**\n\n8. **Seal Plate:**\n   - **Using `sciclops`:**\n     1. Transfer the plate from `biometra.default` to `sealer.default`.\n   - **Using `sealer`:**\n     1. Seal plate at 175\u00b0C for 20 minutes.\n\n#### **Stage 6: Verification Step**\n\n9. **Verify Plate Sealing:**\n   - **Using `camera_module` at `camera_module.plate_station`:**\n     1. Take a picture of the sealed plate and verify proper sealing.\n\n#### **Stage 7: Completing the Experiment**\n\n10. **Return Sealed Plate to Start Position:**\n    - **Using `sciclops`:**\n      1. Transfer sealed plate from `sealer.default` to `ot2_pcr_alpha.deck1_cooler`.\n\n### End of Plan",
    "generated_code": "Certainly. Here is the regenerated Python script with additional comments for clarity:\n\n```python\n#!/usr/bin/env python3\n\nimport yaml\nfrom time import sleep\nfrom pathlib import Path\n\n# Assuming a module exists providing Experiment class\nfrom experiment_module import Experiment\n\n\ndef load_workflow(file_path):\n    \"\"\"\n    Load the workflow definition from a YAML file.\n    \n    Args:\n        file_path (str): Path to the YAML workflow file.\n\n    Returns:\n        dict: Parsed workflow configuration.\n    \"\"\"\n    with open(file_path, 'r') as stream:\n        return yaml.safe_load(stream)\n\n\ndef execute_step(exp, step):\n    \"\"\"\n    Execute a single step in the workflow.\n    \n    Args:\n        exp (Experiment): The Experiment instance to interface with the workflow system.\n        step (dict): The step details extracted from the workflow configuration.\n    \n    Raises:\n        Exception: If the action execution fails.\n    \"\"\"\n    print(f\"Executing Step: {step['name']}\")\n    module = step['module']\n    action = step['action']\n    args = step.get('args', {})\n    comment = step.get('comment', \"\")\n    \n    # Logging the step information\n    print(f\"Step Comment: {comment}\")\n    \n    # Initiate the action within the specified module\n    exp.run_action(module, action, args)\n    \n    # Loop to wait until the action completes\n    while True:\n        status = exp.query_action_status(module, action)\n        print(f\"Status: {status}\")\n        if status in [\"failed\", \"success\"]:\n            break\n        sleep(1)\n    \n    # Raise an exception if the action fails\n    if status == \"failed\":\n        raise Exception(f\"Action {action} in module {module} failed.\")\n\n\ndef main():\n    \"\"\"\n    Main function to load the workflow and execute it step-by-step.\n    \"\"\"\n    # Define the path to the workflow YAML file\n    workflow_file = Path(\"pcr_experiment_workflow.yaml\")\n    \n    # Load the workflow configuration\n    workflow = load_workflow(workflow_file)\n    \n    # Initialize and register the experiment\n    exp = Experiment(\"127.0.0.1\", \"8000\", \"PCR Experiment Workflow\")\n    exp.register_exp()\n    \n    # Retrieve the list of steps from the workflow definition\n    steps = workflow['flowdef']\n    executed_steps = set()  # Set to track executed steps\n\n    # Loop until all steps are executed\n    while steps:\n        for step in steps:\n            # Check if all dependencies of the current step are met\n            if all(dep in executed_steps for dep in step['dependencies']):\n                # Execute the step\n                execute_step(exp, step)\n                # Mark the step as executed\n                executed_steps.add(step['id'])\n                # Remove the executed step from the list\n                steps.remove(step)\n                break  # Exit to re-check the updated steps list\n\n    print(\"PCR Experiment Workflow Completed Successfully!\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Detailed Comments:\n\n1. **Import Required Libraries**:\n    - **yaml**: Used to read the YAML file containing the workflow.\n    - **time.sleep**: Used to pause execution while waiting for actions to complete.\n    - **pathlib.Path**: Used to handle file paths efficiently.\n\n2. **Function: `load_workflow`**:\n    - Opens and reads the YAML file specified by `file_path`.\n    - Parses and returns the file content as a dictionary.\n\n3. **Function: `execute_step`**:\n    - Accepts an instance of `Experiment` and a dictionary representing a workflow step.\n    - Logs the details of the step being executed.\n    - Calls `run_action` method on the `Experiment` instance to initiate the action.\n    - Enters a loop to periodically check the status of the action until it finishes.\n    - Raises an exception if the action fails to ensure the workflow stops on errors.\n\n4. **Function: `main`**:\n    - Defines the path to the workflow YAML file.\n    - Loads the workflow configuration from the YAML file.\n    - Initializes an `Experiment` instance and registers the experiment.\n    - Iterates through the steps in the workflow, checking and executing steps whose dependencies have been met.\n    - Prints a completion message once all workflow steps have been executed successfully.\n\n### Assumptions:\n- The `Experiment` class and its methods are part of a provided module (`experiment_module`) that interfaces with the experiment control system.\n- The methods `run_action` and `query_action_status` are present in the `Experiment` class, and they facilitate executing and checking the status of actions, respectively.\n- The path to the workflow YAML file (`pcr_experiment_workflow.yaml`) is correct and the file contains the expected structure as per the given YAML configuration.",
    "generated_workflow": "```yaml\nname: PCR Experiment Workflow\nmodules:\n  - name: ot2_pcr_alpha\n  - name: sciclops\n  - name: biometra\n  - name: sealer\n  - name: camera_module\nflowdef:\n  - name: Prepare Master Mix - Add Biowater\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: biowater_dispense\n      destination: empty_tube\n      volume: 8\n      unit: ml\n    id: stage1_step1\n    dependencies: []\n    comment: Add 8 mL Biowater to empty tube\n\n  - name: Prepare Master Mix - Add Reaction Buffer\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: reaction_buffer_dispense\n      destination: empty_tube\n      volume: 1\n      unit: ml\n    id: stage1_step2\n    dependencies: [stage1_step1]\n    comment: Add 1 mL 5x Reaction Buffer to tube\n\n  - name: Prepare Master Mix - Add DNA Polymerase\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: dna_polymerase_dispense\n      destination: empty_tube\n      volume: 40\n      unit: \u00b5l\n    id: stage1_step3\n    dependencies: [stage1_step2]\n    comment: Add 40 \u00b5L DNA Polymerase to tube\n\n  - name: Prepare Master Mix - Add DNTPs\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: dntps_dispense\n      destination: empty_tube\n      volume: 200\n      unit: \u00b5l\n    id: stage1_step4\n    dependencies: [stage1_step3]\n    comment: Add 200 \u00b5L DNTPs to tube\n\n  - name: Prepare Master Mix - Add GC Enhancer\n    module: ot2_pcr_alpha\n    action: transfer_liquid\n    args:\n      source: gc_enhancer_dispense\n      destination: empty_tube\n      volume: 1\n      unit: ml\n    id: stage1_step5\n    dependencies: [stage1_step4]\n    comment: Add 1 mL GC Enhancer to tube\n\n  - name: Aliquot Master Mix\n    module: ot2_pcr_alpha\n    action: distribute_liquid\n    args:\n      source: master_mix_tube\n      destination: final_plate\n      volume_per_well: 60\n      unit: \u00b5l\n    id: stage2_step1\n    dependencies: [stage1_step5]\n    comment: Distribute 60 \u00b5L of Master Mix to each well of final plate\n\n  - name: Add Forward Primers\n    module: ot2_pcr_alpha\n    action: add_primers\n    args:\n      primer_type: forward\n      destination: final_plate\n      volume_per_well: 20\n      unit: \u00b5l\n    id: stage3_step1\n    dependencies: [stage2_step1]\n    comment: Add 20 \u00b5L of forward primers into each well of final plate\n\n  - name: Add Reverse Primers\n    module: ot2_pcr_alpha\n    action: add_primers\n    args:\n      primer_type: reverse\n      destination: final_plate\n      volume_per_well: 20\n      unit: \u00b5l\n    id: stage3_step2\n    dependencies: [stage3_step1]\n    comment: Add 20 \u00b5L of reverse primers into each well of final plate\n\n  - name: Add DNA Template\n    module: ot2_pcr_alpha\n    action: add_dna\n    args:\n      source: template_dna\n      destination: final_plate\n      volume_per_well: 20\n      unit: \u00b5l\n    id: stage3_step3\n    dependencies: [stage3_step2]\n    comment: Add 20 \u00b5L of template DNA into each well of final plate\n\n  - name: Transfer Plate to Thermocycler\n    module: sciclops\n    action: transfer_plate\n    args:\n      source: ot2_pcr_alpha.deck1_cooler\n      destination: biometra.default\n    id: stage4_step1\n    dependencies: [stage3_step3]\n    comment: Transfer plate from cooler to thermocycler\n\n  - name: Execute PCR Protocol\n    module: biometra\n    action: run_protocol\n    args:\n      program: pcr_protocol_3cycles\n    id: stage4_step2\n    dependencies: [stage4_step1]\n    comment: Run PCR protocol with 3 thermocycling cycles\n\n  - name: Seal Plate\n    module: sealer\n    action: seal\n    args:\n      temperature: 175\n      time: 20\n    id: stage5_step1\n    dependencies: [stage4_step2]\n    comment: Seal plate at 175\u00b0C for 20 minutes\n\n  - name: Verify Plate Sealing\n    module: camera_module\n    action: take_picture\n    args:\n      location: plate_station\n      file_name: sealed_plate_verification.jpg\n    id: stage6_step1\n    dependencies: [stage5_step1]\n    comment: Verify plate sealing with camera picture\n\n  - name: Return Plate to Cooler\n    module: sciclops\n    action: transfer_plate\n    args:\n      source: sealer.default\n      destination: ot2_pcr_alpha.deck1_cooler\n    id: stage7_step1\n    dependencies: [stage6_step1]\n    comment: Return sealed plate to cooler\nmetadata:\n  author: Your Name\n  info: Detailed PCR Experiment Workflow with verification steps\n  version: 0.1\n```",
    "generated_config": "```yaml\nequipment:\n  - name: opentrons_96_tiprack_300ul\n    location: '1'\n  - name: opentrons_96_tiprack_20ul\n    location: '2'\n  - name: opentrons_96_tiprack_20ul\n    location: '3'\n  - name: opentrons_96_tiprack_20ul\n    location: '4'\n  - name: opentrons_24_tuberack_eppendorf_1.5ml_safelock_snapcap\n    location: '5'\n  - name: opentrons_10_tuberack_nest_4x50ml_6x15ml_conical\n    location: '6'\n  - name: corning_96_wellplate_360ul_flat\n    location: '7'\n  - name: p300_multi_gen2\n    mount: right\n  - name: p20_single_gen2\n    mount: left\n  - name: temperature_module\n    location: '10'\n\ncommands:\n  - name: Transfer Biowater\n    source: '6:A1'\n    destination: '7:A1'\n    volume:\n      - 676\n      - 676\n      - 676\n    mix_cycles: 0\n    mix_volume: 0\n    drop_tip:\n      - false\n      - false\n      - true\n\n  - name: Transfer 5x Reaction Buffer\n    source: '6:A2'\n    destination: '7:A1'\n    volume: 720\n    mix_cycles: 3\n    mix_volume: 500\n    drop_tip: true\n\n  - name: Transfer DNA Polymerase\n    source: '6:A3'\n    destination: '7:A1'\n    volume:\n      - 12\n      - 12\n    mix_cycles: 3\n    mix_volume: 20\n    drop_tip:\n      - false\n      - true\n\n  - name: Transfer DNTPs\n    source: '6:A4'\n    destination: '7:A1'\n    volume: 108\n    mix_cycles: 3\n    mix_volume: 600\n    drop_tip: true\n\n  - name: Transfer GC Enhancer\n    source: '6:A5'\n    destination: '7:A1'\n    volume: 720\n    mix_cycles: 7\n    mix_volume: 700\n    drop_tip: true\n\n  - name: Distribute Master Mix\n    source: '7:A1'\n    destination: '10:A1'\n    volume: 60\n    drop_tip: false\n\n  - name: Add Forward Primer\n    source: '5:A1'\n    destination: '10:A1'\n    volume: 20\n    mix_cycles: 3\n    mix_volume: 15\n    drop_tip: true\n\n  - name: Add Reverse Primer\n    source: '5:A2'\n    destination: '10:A1'\n    volume: 20\n    mix_cycles: 3\n    mix_volume: 15\n    drop_tip: true\n\n  - name: Add Template DNA\n    source: '5:A3'\n    destination: '10:A1'\n    volume: 20\n    mix_cycles: 3\n    mix_volume: 15\n    drop_tip: true\n\n  - name: Transfer Plate to Thermocycler\n    get_plate: ot2_pcr_alpha.deck1_cooler\n    put_plate: biometra.default\n\n  - name: Execute PCR\n    lid: close\n    protocol:\n      cycles: 3\n      steps:\n        - temp: 95\u00b0C\n          time: 30\n        - temp: 55\u00b0C\n          time: 30\n        - temp: 72\u00b0C\n          time: 60\n\n  - name: Transfer Plate to Sealer\n    get_plate: biometra.default\n    put_plate: sealer.default\n\n  - name: Seal Plate\n    temp: 175\u00b0C\n    time: 20\n\n  - name: Verify Plate Sealing\n    station: camera_module.plate_station\n    action: take_picture\n\n  - name: Return Sealed Plate to Starting Position\n    get_plate: sealer.default\n    put_plate: ot2_pcr_alpha.deck1_cooler\n\nmetadata:\n  protocolName: PCR Experiment Protocol\n  author: Researcher Name\n  description: Step-by-Step PCR Experiment Plan with Verification\n  apiLevel: '2.12'\n```"
}